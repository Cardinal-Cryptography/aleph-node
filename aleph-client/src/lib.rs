#![warn(missing_docs)]
//! API for [aleph-node](https://github.com/Cardinal-Cryptography/aleph-node) chain.
//!
//! This crate provides a Rust application interface for submitting transactions to `aleph-node` chain.
//! Most of the [pallets](https://docs.substrate.io/reference/frame-pallets/) are common to any
//! [Substrate](https://github.com/paritytech/substrate) chain, but there are some unique to `aleph-node`,
//! e.g. [`pallets::elections::ElectionsApi`].
//!

#![feature(auto_traits)]
#![feature(negative_impls)]

extern crate core;

use anyhow::anyhow;
pub use contract_transcode;
use serde::Serialize;
use serde_json::value::RawValue;
pub use subxt::ext::{codec, sp_core, sp_runtime};
use subxt::{rpc::RpcParams, OnlineClient, PolkadotConfig, SubstrateConfig};

pub use crate::sp_core::Pair;
use crate::{
    api::runtime_types::aleph_runtime::RuntimeCall as Call,
    sp_core::{ed25519, sr25519, H256},
};
// generated by running `subxt codegen --derive Clone Debug Eq PartialEq | rustfmt --edition=2021 > src/aleph_zero.rs`
#[allow(clippy::all)]
mod aleph_zero;
mod connections;
pub mod contract;
/// API for pallets.
pub mod pallets;
mod runtime_types;
/// Block / session / era API.
pub mod utility;
/// Waiting for some events API.
pub mod waiting;

pub use aleph_zero::api;
pub use runtime_types::*;

/// An alias for a pallet aleph keys.
pub type AlephKeyPair = ed25519::Pair;
/// An alias for a type of a key pair that signs chain transactions.
pub type RawKeyPair = sr25519::Pair;
/// An alias for an account id type.
pub type AccountId = crate::sp_core::crypto::AccountId32;
/// An alias for a client type.
pub type Client = OnlineClient<AlephConfig>;
/// An alias for a hash type.
pub type BlockHash = H256;
/// An alias for a hash type.
pub type CodeHash = H256;

/// An alias for a configuration of live chain, e.g. block index type, hash type.
pub(crate) type AlephConfig = PolkadotConfig;
pub(crate) type ParamsBuilder = subxt::tx::PolkadotExtrinsicParamsBuilder<SubstrateConfig>;
pub(crate) type SubxtClient = OnlineClient<AlephConfig>;
type PairSigner = subxt::tx::PairSigner<AlephConfig, RawKeyPair>;

pub use connections::{
    Connection, ConnectionApi, RootConnection, SignedConnection, SignedConnectionApi, SudoCall,
};

/// Wrapped around subxt PairSigner
pub struct KeyPair {
    inner: PairSigner,
}

impl KeyPair {
    /// Constructs a new KeyPair from RawKeyPair
    pub fn new(keypair: RawKeyPair) -> Self {
        KeyPair {
            inner: PairSigner::new(keypair),
        }
    }

    /// Returns a reference to the inner RawKeyPair
    pub fn signer(&self) -> &RawKeyPair {
        self.inner.signer()
    }

    /// Returns corresponding AccountId
    pub fn account_id(&self) -> &AccountId {
        self.inner.account_id()
    }
}

/// Builder for rpc call parameters
#[derive(Debug, Clone, Default)]
pub struct RpcCallParams {
    inner: RpcParams,
}

impl RpcCallParams {
    /// Constructs an empty params struct
    pub fn new() -> Self {
        Self {
            inner: RpcParams::new(),
        }
    }

    /// Adds a new param
    pub fn push<P: Serialize>(&mut self, param: P) -> anyhow::Result<()> {
        self.inner
            .push(param)
            .map_err(|e| anyhow!("Failed to push rpc param: {:?}", e))
    }

    /// Builds a RawValue representing rpc call parameters
    pub fn build(self) -> Option<Box<RawValue>> {
        self.inner.build()
    }
}

/// When submitting a transaction, wait for given status before proceeding.
#[derive(Copy, Clone)]
pub enum TxStatus {
    /// A tx must be included in some block.
    InBlock,
    /// A tx must be included in some finalized block.
    Finalized,
    /// A tx must be successfully submitted.
    Submitted,
}

/// Converts given seed phrase to a sr25519 [`KeyPair`] object.
/// * `seed` - a 12 or 24 word seed phrase
pub fn keypair_from_string(seed: &str) -> KeyPair {
    let pair = sr25519::Pair::from_string(seed, None).expect("Can't create pair from seed value");
    KeyPair {
        inner: PairSigner::new(pair),
    }
}

/// Converts given seed phrase to a sr25519 [`RawKeyPair`] object.
/// * `seed` - a 12 or 24 word seed phrase
pub fn raw_keypair_from_string(seed: &str) -> RawKeyPair {
    sr25519::Pair::from_string(seed, None).expect("Can't create pair from seed value")
}

/// Converts given seed phrase to a ed25519 [`AlephKeyPair`] object.
/// * `seed` - a 12 or 24 word seed phrase
pub fn aleph_keypair_from_string(seed: &str) -> AlephKeyPair {
    ed25519::Pair::from_string(seed, None).expect("Can't create pair from seed value")
}

/// Converts a key pair object to `AccountId`.
/// * `keypair` - a key-pair object, e.g. [`ed25519::Pair`] or [`sr25519::Pair`]
pub fn account_from_keypair<P>(keypair: &P) -> AccountId
where
    P: Pair,
    AccountId: From<<P as Pair>::Public>,
{
    AccountId::from(keypair.public())
}
