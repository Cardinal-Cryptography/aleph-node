//! Autogenerated weights for baby_liminal_extension
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2024-01-25, STEPS: `20`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("./liminal-benchmark-chainspec.json"), DB CACHE: 1024

// Executed Command:
// target/release/aleph-node
// benchmark
// pallet
// --chain=./liminal-benchmark-chainspec.json
// --pallet=baby_liminal_extension
// --extrinsic=*
// --steps=20
// --repeat=5
// --template=.maintain/pallet-weight-template.hbs
// --wasm-execution=compiled
// --output=baby-liminal-extension/src/backend/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(unused_variables)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;
use crate::backend::ByteCount;

/// Weight functions needed for baby_liminal_extension.
pub trait WeightInfo {
    /// Weight for `verify` call.
    ///
    /// # Arguments
    ///
    /// To be added and measured (we are waiting for the proving backend choice).
    fn verify() -> Weight;

    /// Weight of reading arguments for the `verify` call.
    ///
    /// # Arguments
    ///
    /// * `input_length` - length of the input buffer.
    fn verify_read_args(input_length: ByteCount) -> Weight;
}

impl<I: BenchmarkInfo> WeightInfo for I {
    fn verify() -> Weight {
        <I as BenchmarkInfo>::verify_proof()
    }

    fn verify_read_args(input_length: ByteCount) -> Weight {
        <I as BenchmarkInfo>::verify_read_args(input_length)
    }
}

/// Benchmark results for baby_liminal_extension.
trait BenchmarkInfo {
    fn verify_read_args(x: u32, ) -> Weight;
    fn verify_proof() -> Weight;
}

/// Weights for baby_liminal_extension using the Substrate node and recommended hardware.
pub struct AlephWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> BenchmarkInfo for AlephWeight<T> {
    /// The range of component `x` is `[0, 10000000]`.
    fn verify_read_args(x: u32, ) -> Weight {
        // Minimum execution time: 254 nanoseconds.
        Weight::from_parts(66_178_198_u64, 0)
            // Standard Error: 6
            .saturating_add(Weight::from_parts(150_u64, 0).saturating_mul(x as u64))
    }
    // Storage: `VkStorage::VerificationKeys` (r:1 w:0)
    // Proof: `VkStorage::VerificationKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn verify_proof() -> Weight {
        // Minimum execution time: 4_024_837 nanoseconds.
        Weight::from_parts(4_128_288_000_u64, 0)
            .saturating_add(T::DbWeight::get().reads(1_u64))
    }
}

// For backwards compatibility and tests
impl BenchmarkInfo for () {
    /// The range of component `x` is `[0, 10000000]`.
    fn verify_read_args(x: u32, ) -> Weight {
        // Minimum execution time: 254 nanoseconds.
        Weight::from_parts(66_178_198_u64, 0)
            // Standard Error: 6
            .saturating_add(Weight::from_parts(150_u64, 0).saturating_mul(x as u64))
    }
    // Storage: `VkStorage::VerificationKeys` (r:1 w:0)
    // Proof: `VkStorage::VerificationKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
    fn verify_proof() -> Weight {
        // Minimum execution time: 4_024_837 nanoseconds.
        Weight::from_parts(4_128_288_000_u64, 0)
            .saturating_add(RocksDbWeight::get().reads(1_u64))
    }
}
