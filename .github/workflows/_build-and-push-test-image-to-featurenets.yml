---
#  This workflow builds aleph-node docker image from pull request commit
#  and pushes it to featurenet registry. Test binary is used, and it is wrapped in registry
#  separated from production builds
name: Build and push PR image to featurenets
on:
  workflow_call:
    inputs:
      ref:
        description: "git ref: hash, branch, tag or 'mainnet' or 'testnet'"
        type: string
        required: true
    outputs:
      image-tag:
        description: Tag of pushed docker image
        value: ${{ jobs.main.outputs.image-tag }}
jobs:
  main:
    name: Build and push image
    runs-on: ubuntu-20.04
    outputs:
      image-tag: ${{ steps.push-image.outputs.image-tag }}
    steps:
      - name: Checkout aleph-node
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0

      - name: Call action get-ref-properties
        id: get-ref-properties
        uses: Cardinal-Cryptography/github-actions/get-ref-properties@v5

      - name: Download test aleph-node artifact
        uses: actions/download-artifact@v3
        with:
          name: aleph-test-node
          path: target/release/

      - name: Build docker image with PR aleph-node binary
        env:
          IMAGE_TAG: fe-${{ steps.get-ref-properties.outputs.branch-name-for-argo-with-sha }}
        run: |
          chmod +x target/release/aleph-node
          ls -alh target/release/
          ls -alh ./docker/
          docker build \
            --tag '${{ vars.ECR_PUBLIC_REGISTRY }}feature-env-aleph-node:${{ env.IMAGE_TAG }}' \
            -f ./docker/Dockerfile .

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.ECR_PUBLIC_HOST }}
          username: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}

      - name: Push image to the featurenet registry
        id: push-image
        env:
          # yamllint disable-line rule:line-length
          IMAGE_TAG: fe-${{ steps.get-ref-properties.outputs.branch-name-for-argo-with-sha }}
        run: |
          docker push '${{ vars.ECR_PUBLIC_REGISTRY }}feature-env-aleph-node:${{ env.IMAGE_TAG }}'
          echo 'image-tag=${{ env.IMAGE_TAG }}' >> $GITHUB_OUTPUT
