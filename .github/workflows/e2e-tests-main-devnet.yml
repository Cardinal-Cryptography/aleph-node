name: e2e-tests-main-devnet

on:
  pull_request:
    paths-ignore:
      - "*.md"
    branches:
      - main
  push:
    paths-ignore:
      - "*.md"
    branches:
      - main

jobs:
  build-new-node:
    name: Build node and runtime artifacts (PR version)
    uses: Cardinal-Cryptography/aleph-node/.github/workflows/build-node-and-runtime.yml@main
    with:
      rust-toolchain-version: 'nightly-2021-10-24'


  build-docker:
    needs: [build-new-node]
    name: Build docker image of the node
    runs-on: ubuntu-latest
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout Source code
        uses: actions/checkout@v2

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: aleph-node
          path: target/release/

      - name: Build docker image
        id: build-image
        run: |
          chmod +x target/release/aleph-node
          docker build --tag aleph-node:latest -f ./docker/Dockerfile .
          docker save -o aleph-node.tar aleph-node:latest

      - name: Upload docker image
        uses: actions/upload-artifact@v2
        with:
          name: aleph-docker
          path: aleph-node.tar
          if-no-files-found: error
          retention-days: 7


  check-determinism:
    needs: [build-new-node]
    name: Verify runtime build determinism
    runs-on: ubuntu-latest
    env:
      RUST_TOOLCHAIN_VERSION: nightly-2021-10-24
      RUST_BACKTRACE: full
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout Source code
        uses: actions/checkout@v2

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN_VERSION }}
          override: true

      - name: Install WASM target
        run: rustup target add wasm32-unknown-unknown --toolchain "$RUST_TOOLCHAIN_VERSION"

      - name: Download artifact
        uses: actions/download-artifact@v2
        with:
          name: aleph-runtime

      - name: Build runtime and compare checksum with artifact
        env:
          ARTIFACT: aleph_runtime.compact.wasm
          TARGET_DIR: target/release/wbuild/aleph-runtime
        run: |
          mkdir -p "$TARGET_DIR"
          mv "$ARTIFACT" "$TARGET_DIR"
          sha256sum "$TARGET_DIR/$ARTIFACT" > checksum.sha256
          cargo clean
          cargo build --release -p aleph-runtime
          sha256sum -c checksum.sha256


  build-test-client:
    name: Build e2e test client suite
    runs-on: ubuntu-latest
    env:
      RUST_TOOLCHAIN_VERSION: nightly-2021-10-24
      RUST_BACKTRACE: full
    steps:
      - name: Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout Source code
        uses: actions/checkout@v2

      - name: Install Rust Toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN_VERSION }}
          override: true

      - name: Build binary and docker image
        run: |
          cd e2e-tests/
          cargo build --release
          docker build --tag aleph-e2e-client:latest -f Dockerfile .
          docker save -o aleph-e2e-client.tar aleph-e2e-client:latest

      - name: Upload Artifact
        uses: actions/upload-artifact@v2
        with:
          name: aleph-e2e-client
          path: e2e-tests/aleph-e2e-client.tar
          if-no-files-found: error
          retention-days: 7


  run-e2e-tests:
    needs: [build-docker, build-test-client]
    name: Run e2e tests suite
    runs-on: ubuntu-latest
    steps:
      - name: GIT | Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

      - name: GIT | Checkout Source code
        uses: actions/checkout@v2

      - name: Download artifact with docker image
        uses: actions/download-artifact@v2
        with:
          name: aleph-docker

      - name: Load node docker image
        shell: bash
        run: docker load -i aleph-node.tar

      - name: Run consensus party
        run: ./.github/scripts/run_consensus.sh

      - name: Display bootnode logs
        run: docker logs damian --follow &

      - name: Download artifact with the test suite image
        uses: actions/download-artifact@v2
        with:
          name: aleph-e2e-client

      - name: Load test suite docker image
        shell: bash
        run: docker load -i aleph-e2e-client.tar

      - name: Run e2e test suite
        shell: bash
        timeout-minutes: 10
        run: |
          ./.github/scripts/run_e2e_tests.sh


  push-image:
    needs: [run-e2e-tests]
    name: Push node image to the ECR repository
    runs-on: ubuntu-latest
    steps:
      - name: GIT | Cancel Previous Runs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

      - name: GIT | Checkout Source code
        if: github.event_name == 'push'
        uses: actions/checkout@v2

      - name: Download artifact with docker image
        if: github.event_name == 'push'
        uses: actions/download-artifact@v2
        with:
          name: aleph-docker

      - name: Load node docker image
        if: github.event_name == 'push'
        shell: bash
        run: docker load -i aleph-node.tar

      - name: Configure AWS credentials
        if: github.event_name == 'push'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Public Amazon ECR
        if: github.event_name == 'push'
        id: login-public-ecr
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: GIT | Get branch info & current commit sha.
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF##*/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Push aleph-node Current Image to Public ECR
        if: github.event_name == 'push'
        env:
          CURRENT_IMAGE: aleph-node:latest
          ECR_PUSH_IMAGE: public.ecr.aws/p6e8q1z1/aleph-node:${{ steps.vars.outputs.sha_short }}
        run: |
          docker tag ${{ env.CURRENT_IMAGE }} ${{ env.ECR_PUSH_IMAGE }}
          docker push ${{ env.ECR_PUSH_IMAGE }}

      - name: Send Slack Notification
        if: github.event_name == 'push'
        uses: rtCamp/action-slack-notify@v2
        continue-on-error: true
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_USERNAME: GithubActions
          SLACK_TITLE: e2e tests job has finished
          MSG_MINIMAL: actions url


  build-old-node:
    name: Build node and runtime artifacts (main version)
    uses: Cardinal-Cryptography/aleph-node/.github/workflows/build-node-and-runtime.yml@main
    with:
      rust-toolchain-version: 'nightly-2021-10-24'
      ref: 'main'
      artifact-prefix: 'old-'


  test-runtime-update:
    name: Test runtime update
    runs-on: ubuntu-latest
    needs: [build-old-node, build-new-node]
    env:
      RUST_TOOLCHAIN_VERSION: nightly-2021-10-24
    steps:
      - name: Cancel previous runs
        uses: styfle/cancel-workflow-action@0.9.0
        with:
          access_token: ${{ github.token }}

      - name: Checkout source code
        uses: actions/checkout@v2

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.RUST_TOOLCHAIN_VERSION }}
          override: true

      - name: Restore Cargo Cache
        uses: actions/cache@v2
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Download all artifacts
        uses: actions/download-artifact@v2
        with:
          path: local-tests/

      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Test update
        env:
          # Relative to local-tests/ directory
          OLD_BINARY: aleph-node/aleph-node
          NEW_BINARY: old-aleph-node/aleph-node
          NEW_RUNTIME: aleph-runtime/aleph_runtime.compact.wasm
        run: ./.github/scripts/test_update.sh


  remove-old-artifacts:
    name: Remove old node and runtime artifacts
    runs-on: ubuntu-latest
    needs: [test-runtime-update]
    steps:
      - name: Remove artifacts
        uses: geekyeggo/delete-artifact@v1
        with:
          failOnError: false
          name: |
            old-aleph-node
            old-aleph-runtime
