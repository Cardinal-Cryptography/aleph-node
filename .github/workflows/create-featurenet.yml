---
name: Deploy featurenet

on:
  pull_request:
    types: [labeled, closed]

env:
  RPC_TESTNET_URL: https://rpc.test.azero.dev
  WSS_TESTNET_URL: wss://ws.test.azero.dev
  RPC_MAINNET_URL: https://rpc.azero.dev
  FORKOFF_IMAGE: ${{ vars.ECR_PUBLIC_REGISTRY }}fork-off:latest

jobs:
  check-vars-and-secrets:
    name: Check vars and secrets
    uses: ./.github/workflows/_check-vars-and-secrets.yml
    secrets: inherit

  ## After that job run, artefact with aleph-node is created with name: aleph-release-node
  build-aleph-node-binary:
    needs: [check-vars-and-secrets]
    if: >
      (github.event.label.name == 'trigger:create-featurenet') ||
      (github.event.label.name == 'trigger:create-hot-featurenet')
    name: Build production artifacts
    uses: ./.github/workflows/_build-production-node-and-runtime.yml
    secrets: inherit

  store-aleph-node-binary:
    needs: [build-aleph-node-binary]
    if: >
      (github.event.label.name == 'trigger:create-featurenet') ||
      (github.event.label.name == 'trigger:create-hot-featurenet')
    name: Store production artifacts
    uses: ./.github/workflows/_store-production-node-and-runtime.yml
    secrets: inherit

  push-pr-image:
    needs: [build-aleph-node-binary]
    if: >
      (github.event.label.name == 'trigger:create-featurenet') ||
      (github.event.label.name == 'trigger:create-hot-featurenet')
    name: Build and push PR docker image to featurenet registry
    uses: ./.github/workflows/_build-and-push-pull-request-image-to-featurenets.yml
    secrets: inherit

  create-featurenet:
    needs: [check-vars-and-secrets]
    if: >
      (github.event.label.name == 'trigger:create-featurenet') ||
      (github.event.label.name == 'trigger:create-hot-featurenet')
    name: Create featurenet based on the PR
    runs-on: ubuntu-20.04
    outputs:
      deployment-id: ${{ steps.deployment.outputs.deployment_id }}
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: Delete old featurenet when re-deploying
        if: contains(github.event.pull_request.labels.*.name, 'state:created-featurenet')
        uses: ./.github/actions/delete-featurenet
        with:
          gh-ci-token: ${{ secrets.CI_GH_TOKEN }}
          aws-access-key: ${{ secrets.AWS_DEVNET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEVNET_SECRET_ACCESS_KEY }}
          argo-sync-user-token: ${{ secrets.ARGO_SYNC_USER_TOKEN }}
          repo-apps-name: ${{ secrets.REPO_ARGOCD_APPS_NAME }}
          argo-host: ${{ secrets.ARGOCD_DEVNET_HOST }}

      - name: Call action get-ref-properties
        id: get-ref-properties
        uses: ./.github/actions/get-ref-properties

      - name: Start Feature Env Deployment
        uses: bobheadxi/deployments@v1.1.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.CI_GH_TOKEN }}
          env: ${{ steps.get-ref-properties.outputs.branch }}
          ref: ${{ github.head_ref }}
          override: true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        env:
          AWS_REGION: us-east-1
        with:
          aws-access-key-id: ${{ secrets.AWS_DEVNET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEVNET_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Public Amazon ECR
        id: login-public-ecr
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.ECR_PUBLIC_HOST }}
          username: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: Build chainspec for testnet FE and send it to S3
        if: contains(github.event.pull_request.labels.*.name, 'trigger:create-featurenet')
        env:
          BRANCH_NAME: ${{ steps.get-ref-properties.outputs.branch }}
          CHAIN_ID: a0fenet
        # yamllint disable rule:line-length
        run: |
          COMMIT_ID=$(curl -s -H "Content-Type: application/json" \
            -d '{"id":1, "jsonrpc":"2.0", "method": "system_version"}' ${{ env.RPC_TESTNET_URL }} \
            | jq -r '.result' | cut -d "-" -f 2 | head -c 7)
          echo $COMMIT_ID
          TESTNET_IMAGE="${{ vars.ECR_PUBLIC_REGISTRY }}aleph-node:$COMMIT_ID"

          # sync all validator's keystores from S3
          aws s3 cp s3://${{ secrets.FEATURENET_KEYS_S3BUCKET_NAME }}/data data --recursive

          # rename validator paths
          declare -A \
            NAMES=([aleph-node-validator-0]=5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY \
            [aleph-node-validator-1]=5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty \
            [aleph-node-validator-2]=5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y \
            [aleph-node-validator-3]=5DAAnrj7VHTznn2AWBemMuyBwZWs6FNFjdyVXUeYum3PTXFy \
            [aleph-node-validator-4]=5HGjWAeFDfFCWPsjFQdVV2Msvz2XtMktvgocEZcCj68kUMaw)

          for NAME in "${!NAMES[@]}"; do
            mv -v data/$NAME data/${NAMES[$NAME]}
          done

          # Generate chainspec skeleton, it will reuse keys from the synced keystore
          docker run -v $(pwd)/data:/data --env RUST_BACKTRACE=1 \
            --entrypoint "/usr/local/bin/aleph-node" $TESTNET_IMAGE bootstrap-chain --raw \
            --base-path /data --chain-id $CHAIN_ID \
            --account-ids 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY,5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty,5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y,5DAAnrj7VHTznn2AWBemMuyBwZWs6FNFjdyVXUeYum3PTXFy,5HGjWAeFDfFCWPsjFQdVV2Msvz2XtMktvgocEZcCj68kUMaw \
            --sudo-account-id 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY \
            --faucet-account-id 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY > chainspec.json

          aws s3 cp chainspec.json \
            s3://${{ secrets.FEATURENET_KEYS_S3BUCKET_NAME }}/fe-${{ env.BRANCH_NAME }}/chainspec.json
          aws s3 cp \
            s3://${{ secrets.FEATURENET_KEYS_S3BUCKET_NAME }}/data/ \
            s3://${{ secrets.FEATURENET_KEYS_S3BUCKET_NAME }}/fe-${{ env.BRANCH_NAME }}/data/ \
            --recursive
        # yamllint enable rule:line-length

      - name: Build chainspec for Hotnet FE and send it to S3
        if: contains(github.event.pull_request.labels.*.name, 'trigger:create-hot-featurenet')
        env:
          BRANCH_NAME: ${{ steps.get-ref-properties.outputs.branch }}
          CHAIN_ID: a0fenet
        # yamllint disable rule:line-length
        run: |
          SYSTEM_VERSION=$(curl -s -H "Content-Type: application/json" \
            -d '{"id":1, "jsonrpc":"2.0", "method": "system_version"}' ${{ env.RPC_MAINNET_URL }} \
            | jq -r '.result')
          SUFFIX="-x86_64-linux-gnu"
          LONG_COMMIT_ID=${SYSTEM_VERSION/%$SUFFIX}
          COMMIT_ID=${LONG_COMMIT_ID: -7}
          echo $COMMIT_ID
          MAINNET_IMAGE="${{ vars.ECR_PUBLIC_REGISTRY }}aleph-node:$COMMIT_ID"

          # sync all validator's keystores from S3
          aws s3 cp s3://${{ secrets.FEATURENET_KEYS_S3BUCKET_NAME }}/data data --recursive

          # rename validator paths
          declare -A \
            NAMES=([aleph-node-validator-0]=5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY \
            [aleph-node-validator-1]=5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty \
            [aleph-node-validator-2]=5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y \
            [aleph-node-validator-3]=5DAAnrj7VHTznn2AWBemMuyBwZWs6FNFjdyVXUeYum3PTXFy \
            [aleph-node-validator-4]=5HGjWAeFDfFCWPsjFQdVV2Msvz2XtMktvgocEZcCj68kUMaw)

          for NAME in "${!NAMES[@]}"; do
            mv -v data/$NAME data/${NAMES[$NAME]}
          done

          # Generate chainspec skeleton, it will reuse keys from the synced keystore
          docker run -v $(pwd)/data:/data --env RUST_BACKTRACE=1 \
            --entrypoint "/usr/local/bin/aleph-node" $MAINNET_IMAGE bootstrap-chain --raw \
            --base-path /data --chain-id $CHAIN_ID \
            --account-ids 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY,5FHneW46xGXgs5mUiveU4sbTyGBzmstUspZC92UhjJM694ty,5FLSigC9HGRKVhB9FiEo4Y3koPsNmBmLJbpXg2mp1hXcS59Y,5DAAnrj7VHTznn2AWBemMuyBwZWs6FNFjdyVXUeYum3PTXFy,5HGjWAeFDfFCWPsjFQdVV2Msvz2XtMktvgocEZcCj68kUMaw \
            --sudo-account-id 5GrwvaEF5zXb26Fz9rcQpDWS57CtERHpNehXCPcNoHGKutQY > chainspec.json

          # Generate chainspec from skeleton
          # docker run -v $(pwd):/app --env RUST_LOG=info ${{ env.FORKOFF_IMAGE }} --ws-rpc-endpoint=${{ env.RPC_MAINNET_URL }} --initial-spec-path=chainspec.skeleton.json --combined-spec-path=chainspec.json
          aws s3 cp \
            chainspec.json \
            s3://${{ secrets.FEATURENET_KEYS_S3BUCKET_NAME }}/fe-${{ env.BRANCH_NAME }}/chainspec.json
          aws s3 cp \
            s3://${{ secrets.FEATURENET_KEYS_S3BUCKET_NAME }}/data/ \
            s3://${{ secrets.FEATURENET_KEYS_S3BUCKET_NAME }}/fe-${{ env.BRANCH_NAME }}/data/ \
            --recursive
      # yamllint enable rule:line-length

      - name: Create featurenet in argocd apps
        if: >
          contains(github.event.pull_request.labels.*.name, "trigger:create-featurenet") |
          contains(github.event.pull_request.labels.*.name, "trigger:create-hot-featurenet")
        uses: ./.github/actions/create-featurenet
        with:
          gh-ci-token: ${{ secrets.CI_GH_TOKEN }}
          argo-sync-user-token: ${{ secrets.ARGO_SYNC_USER_TOKEN }}
          repo-apps-name: ${{ secrets.REPO_ARGOCD_APPS_NAME }}
          argo-host: ${{ secrets.ARGOCD_DEVNET_HOST }}
          # yamllint disable-line rule:line-length
          aleph-node-image: ${{ contains(github.event.pull_request.labels.*.name, "trigger:create-hot-featurenet") && 'mainnet' || 'testnet' }}

      - name: Wait for the testnet aleph-node binary to accept some blocks
        uses: juliangruber/sleep-action@v2.0.0
        with:
          time: 5m

  update-featurenet-image:
    if: >
      (github.event.label.name == 'trigger:create-featurenet') ||
      (github.event.label.name == 'trigger:create-hot-featurenet')
    needs: [push-pr-image, create-featurenet]
    name: Update featurenet to the latest PR aleph-node image
    runs-on: ubuntu-20.04
    steps:
      - name: checkout repo
        uses: actions/checkout@v3

      - name: Call action get-ref-properties
        id: get-ref-properties
        uses: ./.github/actions/get-ref-properties

      - name: Update featurenet in argocd apps
        uses: ./.github/actions/create-featurenet
        with:
          gh-ci-token: ${{ secrets.CI_GH_TOKEN }}
          argo-sync-user-token: ${{ secrets.ARGO_SYNC_USER_TOKEN }}
          repo-apps-name: ${{ secrets.REPO_ARGOCD_APPS_NAME }}
          argo-host: ${{ secrets.ARGOCD_DEVNET_HOST }}
          create-hook: 'true'

      - name: Remove testnet deployment request label if exists
        if: contains(github.event.pull_request.labels.*.name, 'trigger:create-featurenet')
        uses: actions-ecosystem/action-remove-labels@v1.3.0
        with:
          labels: 'trigger:create-featurenet'
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Remove mainnet deployment request label if exists
        if: contains(github.event.pull_request.labels.*.name, 'trigger:create-hot-featurenet')
        uses: actions-ecosystem/action-remove-labels@v1.3.0
        with:
          labels: 'trigger:create-hot-featurenet'
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Remove deleted label if present
        uses: actions-ecosystem/action-remove-labels@v1.3.0
        if: contains(github.event.pull_request.labels.*.name, 'state:deleted-featurenet')
        with:
          labels: 'state:deleted-featurenet'
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Add label to mark that featurenet has been created
        uses: actions-ecosystem/action-add-labels@v1.1.0
        with:
          labels: 'state:created-featurenet'
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Finish Feature Env Deployment
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.CI_GH_TOKEN }}
          status: ${{ job.status }}
          env: ${{ steps.get-ref-properties.outputs.branch }}
          deployment_id: ${{ needs.deploy-feature-env.outputs.deployment-id }}
          # yamllint disable-line rule:line-length
          env_url: https://dev.azero.dev/?rpc=wss%3A%2F%2Fws-fe-${{ steps.get-ref-properties.outputs.branch-name-for-argo }}.dev.azero.dev#/explorer
          ref: ${{ github.head_ref }}

  delete-featurenet:
    needs: [check-vars-and-secrets]
    if: >
      (github.event.label.name == 'trigger:delete-featurenet') ||
      (
        github.event.action == 'closed' &&
        !contains(github.event.pull_request.labels.*.name, 'state:deleted-featurenet') &&
        contains(github.event.pull_request.labels.*.name, 'state:created-featurenet')
      )
    name: Delete featurenet
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Delete featurenet in argocd apps
        uses: ./.github/actions/delete-featurenet
        id: delete_fe
        with:
          gh-ci-token: ${{ secrets.CI_GH_TOKEN }}
          aws-access-key: ${{ secrets.AWS_DEVNET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEVNET_SECRET_ACCESS_KEY }}
          argo-sync-user-token: ${{ secrets.ARGO_SYNC_USER_TOKEN }}
          repo-apps-name: ${{ secrets.REPO_ARGOCD_APPS_NAME }}
          argo-host: ${{ secrets.ARGOCD_DEVNET_HOST }}

      - name: Remove labels
        uses: actions-ecosystem/action-remove-labels@v1.3.0
        with:
          labels: 'trigger:delete-featurenet'
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Remove deployed label if present
        uses: actions-ecosystem/action-remove-labels@v1.3.0
        if: contains(github.event.pull_request.labels.*.name, 'state:created-featurenet')
        with:
          labels: 'state:created-featurenet'
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Add label to mark that featurenet has been deleted
        uses: actions-ecosystem/action-add-labels@v1.1.0
        with:
          labels: 'state:deleted-featurenet'
          github_token: ${{ secrets.CI_GH_TOKEN }}

      - name: Deactivate deployed environment
        uses: bobheadxi/deployments@v1
        with:
          step: deactivate-env
          token: ${{ secrets.CI_GH_TOKEN }}
          env: ${{ steps.delete_fe.outputs.deployment-name }}
          desc: Environment was deleted
          debug: true

      - name: Delete environment and deployments
        uses: strumwolf/delete-deployment-environment@v2
        with:
          token: ${{ secrets.CI_GH_TOKEN }}
          environment: ${{ steps.delete_fe.outputs.deployment-name }}

