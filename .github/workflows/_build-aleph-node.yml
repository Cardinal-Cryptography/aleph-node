---
#  This workflow builds aleph-node binary and docker image.
#  It outputs name of artifacts uploaded to GH Artifacts.
name: Build aleph-node
on:
  workflow_call:
    inputs:
      ref:
        description: 'git ref: hash, branch, tag to build aleph-node binary from'
        type: string
        required: true
      repository:
        description: 'Repository name with owner. For example, actions/checkout. Default:
          github.repository'
        required: false
        type: string
        default: ${{ github.repository }}
      production:
        description: 'Set to true to build production binary, otherwise set to false'
        type: boolean
        required: true
      additional-flags:
        description: 'string consisting of all additional flags for the `cargo build` command,
          e.g. --features <some_feature_name>'
        type: string
        required: false
        default: ''
    outputs:
      artifact-name-binary:
        description: 'Name of artifact aleph-node binary'
        value: ${{ jobs.main.outputs.artifact-name-binary }}
      artifact-name-image:
        description: 'Name of artifact aleph-node image'
        value: ${{ jobs.main.outputs.artifact-name-image }}
jobs:
  main:
    name: Build aleph-node (production=${{ inputs.production }})
    runs-on: [self-hosted, Linux, X64, large]
    env:
      RUST_BACKTRACE: full
      RUSTC_WRAPPER: sccache
      CARGO_FOLDER: ${{ inputs.production == true && 'production' || 'release' }}
      ARTIFACT_NAME_SUFFIX: ${{ inputs.production == true && 'production' || 'test' }}
    outputs:
      artifact-name-binary: ${{ steps.get-artifact-name-binary.outputs.name }}
      artifact-name-image: ${{ steps.get-artifact-name-image.outputs.name }}
    steps:
      - name: Checkout aleph-node source code
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          repository: ${{ inputs.repository }}
          fetch-depth: 0

      - name: Call action get-ref-properties
        id: get-ref-properties
        uses: Cardinal-Cryptography/github-actions/get-ref-properties@v7

      - name: Install Rust toolchain
        uses: Cardinal-Cryptography/github-actions/install-rust-toolchain@v7

      - name: Build test aleph-node
        if: ${{ inputs.production != true }}
        run: |
          cargo build --release -p aleph-node --features only_legacy ${{ inputs.additional-flags }}

      - name: Build production aleph-node
        if: ${{ inputs.production == true }}
        run: cargo build --profile production -p aleph-node

      - name: Get binary artifact name
        id: get-artifact-name-binary
        run: |
          echo "name=aleph-node-${{ env.ARTIFACT_NAME_SUFFIX }}" >> $GITHUB_OUTPUT

      - name: Upload binary to GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get-artifact-name-binary.outputs.name }}
          path: target/${{ env.CARGO_FOLDER }}/aleph-node
          if-no-files-found: error
          retention-days: 7

      - name: Build aleph-node docker image
        run: |
          chmod +x target/${{ env.CARGO_FOLDER }}/aleph-node
          if [[ ${{ inputs.production }} == true ]]; then
            mkdir -p target/release
            mv target/production/aleph-node target/release/
          fi
          docker build --tag aleph-node:latest -f ./docker/Dockerfile .
          docker save -o aleph-node.tar aleph-node:latest

      - name: Get image artifact name
        id: get-artifact-name-image
        run: |
          echo "name=aleph-node-image-${{ env.ARTIFACT_NAME_SUFFIX }}" >> $GITHUB_OUTPUT

      - name: Upload docker to GH Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.get-artifact-name-image.outputs.name }}
          path: aleph-node.tar
          if-no-files-found: error
          retention-days: 7
