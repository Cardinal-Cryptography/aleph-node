---
name: Build, send and deploy postsync hook image.

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  check-vars-and-secrets:
    name: Check vars and secrets
    uses: ./.github/workflows/_check-vars-and-secrets.yml
    secrets: inherit

  build:
    needs: [check-vars-and-secrets]
    name: Save cliain binary as an artifact
    runs-on: self-hosted
    env:
      CARGO_INCREMENTAL: 0
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Call action get-ref-properties
        id: get-ref-properties
        uses: ./.github/actions/get-ref-properties

      - name: Install Rust toolchain
        uses: ./.github/actions/install-rust-toolchain

      - name: Install Protoc
        uses: arduino/setup-protoc@v1
        with:
          version: '3.6.1'
          repo-token: ${{ secrets.CI_GH_TOKEN }}

      - name: Build binary
        run: |
          pushd bin/cliain/
          cargo build --release
          popd

      - name: Build runtime-update-hook
        run: |
          docker build -f docker-runtime-hook/Dockerfile . \
          -t runtime-update-hook:${{ steps.get-ref-properties.outputs.sha }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Public Amazon ECR
        id: login-public-ecr
        uses: docker/login-action@v2
        with:
          registry: ${{ vars.ECR_PUBLIC_HOST }}
          username: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: Push postsync hook current Image to Public ECR
        env:
          CURRENT_IMAGE: runtime-update-hook:${{ steps.get-ref-properties.outputs.sha }}
          # yamllint disable-line rule:line-length
          ECR_PUSH_IMAGE: ${{ vars.ECR_PUBLIC_REGISTRY }}runtime-update-hook:${{ steps.get-ref-properties.outputs.sha }}
          ECR_LATEST: ${{ vars.ECR_PUBLIC_REGISTRY }}runtime-update-hook:latest
        run: |
          docker tag ${{ env.CURRENT_IMAGE }} ${{ env.ECR_PUSH_IMAGE }}
          docker push ${{ env.ECR_PUSH_IMAGE }}

          docker tag ${{ env.ECR_PUSH_IMAGE }} ${{ env.ECR_LATEST }}
          docker push ${{ env.ECR_LATEST }}

      - name: GIT | Checkout argocd apps repo
        uses: actions/checkout@v3
        with:
          repository: Cardinal-Cryptography/${{ secrets.REPO_ARGOCD_APPS_NAME }}
          token: ${{ secrets.CI_GH_TOKEN }}
          path: "${{ secrets.REPO_ARGOCD_APPS_NAME }}"

      - name: Init kustomize
        uses: imranismail/setup-kustomize@v1
        with:
          kustomize-version: "3.8.6"

      - name: Update postsync hook docker image
        env:
          # yamllint disable-line rule:line-length
          RELEASE_IMAGE: ${{ vars.ECR_PUBLIC_REGISTRY }}runtime-update-hook:${{ steps.get-ref-properties.outputs.sha }}
          REGIONS_AWS: 'eu-central-1'
        run: |
            # Deploy new image version for postsync hook
            APPS_NAME=${{ secrets.REPO_ARGOCD_APPS_NAME }}
            cd $APPS_NAME/aleph-node-validators/overlays/devnet/eu-central-1
            kustomize edit set image "send-runtime-hook-image-placeholder=${{ env.RELEASE_IMAGE }}"

      - name: GIT | Commit changes to argocd apps repository.
        uses: EndBug/add-and-commit@v9.1.2
        with:
          author_name: ${{ secrets.AUTOCOMMIT_AUTHOR }}
          author_email: ${{ secrets.AUTOCOMMIT_EMAIL }}
          message: "Update postsync hook image tag to: ${{ steps.get-ref-properties.outputs.sha }}"
          add: "*.yaml"
          cwd: ${{ secrets.REPO_ARGOCD_APPS_NAME }}
