name: Build and send to ECR postsync hook image for sending appropriate transaction after runtime change.

on:
  workflow_dispatch:
  push:
    paths:
      - 'local-tests/send-runtime/**'
      - 'docker-runtime-hook/**'

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}
  cancel-in-progress: true

jobs:
  build:
    name: Save send-runtime binary as an artifact
    runs-on: ubuntu-latest
    env:
      CARGO_INCREMENTAL: 0
    steps:
      - name: Checkout source code
        uses: actions/checkout@v2

      - name: GIT | Get branch info & current commit sha.
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF##*/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"

      - name: Install rust toolchain
        uses: actions-rs/toolchain@v1

      - name: Build binary
        run: |
          pushd local-tests/send-runtime/
          cargo build --release
          popd

      - name: Build runtime-update-hook
        run: |
          docker build -f docker-runtime-hook/Dockerfile . -t runtime-update-hook:${{ steps.vars.outputs.sha_short }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Login to Public Amazon ECR
        id: login-public-ecr
        uses: docker/login-action@v1
        with:
          registry: public.ecr.aws
          username: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}
        env:
          AWS_REGION: us-east-1

      - name: Push aleph-node Current Image to Public ECR
        env:
          CURRENT_IMAGE: runtime-update-hook:${{ steps.vars.outputs.sha_short }}
          ECR_PUSH_IMAGE: public.ecr.aws/p6e8q1z1/runtime-update-hook:${{ steps.vars.outputs.sha_short }}
        run: |
          docker tag ${{ env.CURRENT_IMAGE }} ${{ env.ECR_PUSH_IMAGE }}
          docker push ${{ env.ECR_PUSH_IMAGE }}
