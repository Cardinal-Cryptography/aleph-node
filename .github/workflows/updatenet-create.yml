---
name: UpdateNet Create

on:
  workflow_dispatch:
    inputs:
      start:
        description: 'aleph-node image to be started'
        required: true
        type: choice
        options:
          - testnet
          - mainnet
        default: testnet
      expiration:
        description: 'Time after which updatenet will be removed'
        required: true
        type: choice
        options:
          - 48h
          - 24h
          - 12h
          - 3h
          - 96h
          - never
        default: 48h
      replicas:
        description: 'Number of replicas to start, from 0 to 50'
        required: true
        default: '5'
      internal:
        description: 'Internal network, accessible from VPN only'
        required: false
        type: boolean
        default: false
      name:
        description: 'Name of the updatenet, used instead of run ID'
        required: false
        default: ''

jobs:
  check-vars-and-secrets:
    name: Check vars and secrets
    uses: ./.github/workflows/_check-vars-and-secrets.yml
    secrets: inherit

  create-updatenet:
    needs: [check-vars-and-secrets]
    name: Create updatenet
    runs-on: [self-hosted, Linux, X64, small]
    outputs:
      deployment-id: ${{ steps.deployment.outputs.deployment_id }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Get updatenet name
        id: get-updatenet-name
        shell: bash
        # yamllint disable rule:line-length
        run: |
          if [[
            "${{ inputs.name }}" != "" && \
            ! "${{ inputs.name }}" =~ ^[a-z0-9][a-z0-9\-]{4,30}$
          ]]
          then
            echo "!!! Invalid name"
            exit 1
          fi
          final_updatenet_name_local=updnet-${{ inputs.name != '' && inputs.name || github.run_id }}
          echo "final-updatenet-name=$final_updatenet_name_local" >> $GITHUB_OUTPUT
        # yamllint enable rule:line-length

      - name: Delete old featurenet app and data
        if: contains(github.event.pull_request.labels.*.name, 'state:created-featurenet')
        uses: Cardinal-Cryptography/github-actions/delete-featurenet@v1
        with:
          gh-ci-token: ${{ secrets.CI_GH_TOKEN }}
          aws-access-key-id: ${{ secrets.AWS_DEVNET_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_DEVNET_SECRET_ACCESS_KEY }}
          ecr-public-registry: ${{ vars.ECR_PUBLIC_REGISTRY }}
          argo-sync-user-token: ${{ secrets.ARGO_SYNC_USER_TOKEN }}
          repo-featurenets-name: ${{ secrets.REPO_OPS_FEATURENETS_NAME }}
          argo-host: ${{ secrets.ARGOCD_DEVNET_HOST }}
          featurenet-keys-s3bucket-name: ${{ secrets.FEATURENET_KEYS_S3BUCKET_NAME }}
          featurenet-name: ${{ steps.get-updatenet-name.outputs.final-updatenet-name }}
          git-commit-author: ${{ secrets.AUTOCOMMIT_AUTHOR }}
          git-commit-email: ${{ secrets.AUTOCOMMIT_EMAIL }}

      - name: Start updatenet Deployment
        uses: bobheadxi/deployments@v1.1.0
        id: deployment
        with:
          step: start
          token: ${{ secrets.CI_GH_TOKEN }}
          env: ${{ steps.get-updatenet-name.outputs.final-updatenet-name }}
          override: true
          debug: true

      - name: Create updatenet from scratch, node binary from testnet or mainnet
        uses: Cardinal-Cryptography/github-actions/create-featurenet@v1
        id: create-updatenet
        with:
          gh-ci-token: ${{ secrets.CI_GH_TOKEN }}
          argo-sync-user-token: ${{ secrets.ARGO_SYNC_USER_TOKEN }}
          repo-featurenets-name: ${{ secrets.REPO_OPS_FEATURENETS_NAME }}
          argo-host: ${{ secrets.ARGOCD_DEVNET_HOST }}
          ecr-public-registry: ${{ vars.ECR_PUBLIC_REGISTRY }}
          featurenet-keys-s3bucket-name: ${{ secrets.FEATURENET_KEYS_S3BUCKET_NAME }}
          featurenet-name: ${{ steps.get-updatenet-name.outputs.final-updatenet-name }}
          featurenet-aleph-node-image: ${{ inputs.start == 'mainnet' && 'mainnet' || 'testnet' }}
          expiration: ${{ inputs.expiration }}
          replicas: ${{ inputs.replicas }}
          internal: ${{ inputs.internal && 'true' || 'false' }}
          git-commit-author: ${{ secrets.AUTOCOMMIT_AUTHOR }}
          git-commit-email: ${{ secrets.AUTOCOMMIT_EMAIL }}

      - name: Wait for the aleph-node binary to accept some blocks
        uses: Cardinal-Cryptography/github-actions/wait-for-finalized-heads@v1
        with:
          gh-ci-token: ${{ secrets.CI_GH_TOKEN }}
          repo-featurenets-name: ${{ secrets.REPO_OPS_FEATURENETS_NAME }}
          # yamllint disable-line rule:line-length
          json-rpc-endpoint: https://${{ steps.create-updatenet.outputs.ws-hostname }}

      - name: Finish featurenet Deployment
        uses: bobheadxi/deployments@v1
        if: always()
        with:
          step: finish
          token: ${{ secrets.CI_GH_TOKEN }}
          status: ${{ job.status }}
          env: ${{ steps.get-updatenet-name.outputs.final-updatenet-name }}
          deployment_id: ${{ steps.deployment.outputs.deployment_id }}
          # yamllint disable-line rule:line-length
          env_url: https://dev.azero.dev/?rpc=wss%3A%2F%2F${{ steps.create-updatenet.outputs.ws-hostname }}#/explorer
          debug: true
