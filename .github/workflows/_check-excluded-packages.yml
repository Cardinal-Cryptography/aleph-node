---
name: Check excluded packages

on:
  workflow_call:

jobs:
  main:
    name: Check excluded packages
    runs-on: [self-hosted, Linux, X64, large]
    env:
      CARGO_INCREMENTAL: 0
      RUSTC_WRAPPER: sccache
      CARGO_CONTRACT_VERSION: 3.0.1
      RUST_TOOLCHAIN: nightly-2022-10-30-x86_64-unknown-linux-gnu
      RUST_CONTRACTS_TOOLCHAIN: nightly-2023-01-10-x86_64-unknown-linux-gnu
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: Cardinal-Cryptography/github-actions/install-rust-toolchain@v1
        with:
          targets: wasm32-unknown-unknown
          components: clippy rustfmt

      - name: Read excluded packages from Cargo.toml
        id: read_excluded
        uses: SebRollen/toml-action@v1.0.2
        with:
          file: 'Cargo.toml'
          field: 'workspace.exclude'

      - name: Format output
        id: format_output
        run: |
          packages="$(echo ${{ steps.read_excluded.outputs.value }} \
          | sed 's/[][,]/ /g' | sed 's/\s\+/\n/g' | sed '/^$/d')"
          targets="$(echo "$packages" | sed -r 's/[A-Za-z0-9_/-]+/&\/target\//g')"

          packages="${packages//$'\n'/'%0A'}"
          targets="${targets//$'\n'/'%0A'}"

          echo "packages=$packages" >> $GITHUB_OUTPUT
          echo "targets=$targets" >> $GITHUB_OUTPUT

      - name: Check excluded packages
        run: |
          rustup toolchain install ${RUST_CONTRACTS_TOOLCHAIN}
          rustup toolchain install ${RUST_TOOLCHAIN}
          cargo +${RUST_CONTRACTS_TOOLCHAIN} install cargo-dylint dylint-link
          cargo +${RUST_CONTRACTS_TOOLCHAIN} install --version $CARGO_CONTRACT_VERSION \
            --force --locked cargo-contract

          packages="${{ steps.format_output.outputs.packages }}"
          packages="${packages//'%0A'/$'\n'}"
          for p in ${packages[@]}
          do
            echo "Checking package $p..."
            pushd "$p"
            rustup show
            rm -rf ~/.cargo/registry/cache && rm -rf ~/.cargo/registry/index && cargo clean

            if [ $p = "contracts/adder" ] ||
               [ $p = "contracts/access_control" ] ||
               [ $p = "contracts/adder" ] ||
               [ $p = "contracts/button" ] ||
               [ $p = "contracts/game_token" ] ||
               [ $p = "contracts/marketplace" ] ||
               [ $p = "contracts/simple_dex" ] ||
               [ $p = "contracts/ticket_token" ] ||
               [ $p = "contracts/wrapped_azero" ] ||
               [ $p = "contracts/shared_traits" ]
            then
                cargo contract check
            elif [ $p = "baby-liminal-extension" ] || [ $p = "contracts/poseidon_host_bench" ] ;
            then
                # cargo clippy --release --no-default-features --features substrate \
                #  --target wasm32-unknown-unknown -- --no-deps -D warnings
                :
            elif [ $p = "pallets/baby-liminal" ]
            then
                cargo +${RUST_TOOLCHAIN} test --features runtime-benchmarks
            else
                cargo +${RUST_TOOLCHAIN} clippy -- --no-deps -D warnings
            fi
            cargo fmt --all --check
            popd
          done

      - name: Install nono
        run: |
          # rm -rf ~/.cargo/registry && cargo clean
          cargo +${RUST_CONTRACTS_TOOLCHAIN} install aleph-zero-cargo-nono --locked

      - name: Assert that packages are compatible with no-std
        env:
          CHECK: aleph-zero-cargo-nono check --no-default-features
        run: |
          # `sp-io/src/lib.rs` from `aleph-v0.9.38` cannot be parsed with
          # `syn` from `aleph-zero-cargo-nono`; we have to wait for
          # a version bump
          #
          # cd baby-liminal-extension/
          # ${CHECK}
          # ${CHECK} --features ink

          cd poseidon/
          ${CHECK}
          ${CHECK} --features circuit

          cd ../relations/ark/
          ${CHECK}
          ${CHECK} --features circuit
