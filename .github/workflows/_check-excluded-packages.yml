---
name: Check excluded packages

on:
  workflow_call:

jobs:
  main:
    name: Check excluded packages
    runs-on: self-hosted
    env:
      CARGO_INCREMENTAL: 0
      RUSTC_WRAPPER: sccache
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: ./.github/actions/install-rust-toolchain
        with:
          targets: wasm32-unknown-unknown
          components: clippy rustfmt

      - name: Read excluded packages from Cargo.toml
        id: read_excluded
        uses: SebRollen/toml-action@v1.0.2
        with:
          file: 'Cargo.toml'
          field: 'workspace.exclude'

      - name: Format output
        id: format_output
        run: |
          packages="$(echo ${{ steps.read_excluded.outputs.value }} \
          | sed 's/[][,]/ /g' | sed 's/\s\+/\n/g' | sed '/^$/d')"
          targets="$(echo "$packages" | sed -r 's/[A-Za-z0-9_/-]+/&\/target\//g')"

          packages="${packages//$'\n'/'%0A'}"
          targets="${targets//$'\n'/'%0A'}"

          echo "packages=$packages" >> $GITHUB_OUTPUT
          echo "targets=$targets" >> $GITHUB_OUTPUT

      - name: Check excluded packages
        run: |
          rustup component add clippy rustfmt
          rustup target add wasm32-unknown-unknown

          rustup component add rust-src --toolchain nightly-2022-10-30-x86_64-unknown-linux-gnu
          cargo install --locked cargo-dylint dylint-link
          cargo install --version 2.1.0 --force --locked cargo-contract

          packages="${{ steps.format_output.outputs.packages }}"
          packages="${packages//'%0A'/$'\n'}"
          for p in ${packages[@]}
          do
            echo "Checking package $p..."
            pushd "$p"

            if [ $p = "contracts/adder" ] ||
               [ $p = "contracts/poseidon_host_bench" ] ||
               [ $p = "contracts/access_control" ] ||
               [ $p = "contracts/adder" ] ||
               [ $p = "contracts/button" ] ||
               [ $p = "contracts/game_token" ] ||
               [ $p = "contracts/marketplace" ] ||
               [ $p = "contracts/simple_dex" ] ||
               [ $p = "contracts/ticket_token" ] ||
               [ $p = "contracts/wrapped_azero" ]
            then
               cargo contract check
            elif [ $p = "baby-liminal-extension" ]
            then
              cargo clippy --release --no-default-features --features substrate \
                --target wasm32-unknown-unknown -- --no-deps -D warnings
            else
               cargo clippy -- --no-deps -D warnings
            fi
            cargo fmt --all --check
            popd
          done

      - name: Install nono
        run: cargo install aleph-zero-cargo-nono --locked

      - name: Assert that packages are compatible with no-std
        env:
          CHECK: aleph-zero-cargo-nono check --no-default-features
        run: |
          cd baby-liminal-extension/
          ${CHECK}
          ${CHECK} --features ink

          cd ../poseidon/
          ${CHECK}
          ${CHECK} --features circuit

          cd ../relations/
          ${CHECK}
          ${CHECK} --features circuit
