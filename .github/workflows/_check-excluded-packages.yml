---
name: Check excluded packages

on:
  workflow_call:

jobs:
  main:
    name: Check excluded packages
    runs-on: self-hosted
    container:
      image: mikogs/rust-dev:v0.1.0
      env:
        RUSTC_WRAPPER: sccache
        SCACHE_BUCKET: ${{ secrets.CI_MAINNET_S3BUCKET_NAME }}
        SCACHE_REGION: eu-central-1
        SCCACHE_ERROR_LOG: /tmp/sccache/log.txt
        SCACHE_LOG: debug
        SCCACHE_S3_KEY_PREFIX: sccache
        SCCACHE_CACHE_SIZE: 10G
        AWS_ACCESS_KEY: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}
        RUST_BACKTRACE: full
        CARGO_INCREMENTAL: 0
    steps:
      - name: Start sccache server
        run: |
          mkdir /tmp/sccache
          /usr/local/bin/sccache --start-server &

      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Install rust toolchain
        uses: ./.github/actions/install-rust-toolchain
        with:
          targets: wasm32-unknown-unknown
          components: clippy rustfmt

      - name: Check excluded packages
        run: |
          rustup component add clippy rustfmt
          rustup target add wasm32-unknown-unknown

          rustup component add rust-src --toolchain nightly-2022-10-30-x86_64-unknown-linux-gnu
          cargo install cargo-dylint dylint-link
          cargo install cargo-contract --vers ^2.0 --force --locked

          for p in $(cat Cargo.toml | yj -t | jq -r '.workspace.exclude[]')
          do
            echo "Checking package $p..."
            pushd "$p"

            if [ $p = "contracts/adder" ] ||
               [ $p = "contracts/poseidon_host_bench" ] ||
               [ $p = "contracts/access_control" ] ||
               [ $p = "contracts/adder" ] ||
               [ $p = "contracts/button" ] ||
               [ $p = "contracts/game_token" ] ||
               [ $p = "contracts/marketplace" ] ||
               [ $p = "contracts/simple_dex" ] ||
               [ $p = "contracts/ticket_token" ] ||
               [ $p = "contracts/wrapped_azero" ]
            then
               cargo contract check
            else
               cargo clippy -- --no-deps -D warnings
            fi
            cargo fmt --all --check
            popd
          done

      - name: Install nono
        run: cargo install aleph-zero-cargo-nono --locked

      - name: Assert that packages are compatible with no-std
        env:
          CHECK: aleph-zero-cargo-nono check --no-default-features
        run: |
          cd baby-liminal-extension/
          ${CHECK}
          ${CHECK} --features ink

          cd ../poseidon/
          ${CHECK}
          ${CHECK} --features circuit

          cd ../relations/
          ${CHECK}
          ${CHECK} --features circuit
