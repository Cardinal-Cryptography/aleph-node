---
# This workflow performs live chain (Mainnet or Testnet) sync from a db snapshot,
# using the latest main version.

name: Weekly sync from snapshot test
on:
  workflow_call:
    inputs:
      timeout:
        description: "Test timeout in minutes"
        type: number
        required: true
      args:
        description: "Test arguments passed to bash test runner"
        type: string
        required: true
      snapshot-day:
        description: "Day in date format %Y-%m-%d. If not given, current date is assumed."
        type: string
        required: false
      aws-access-key-id:
        description: 'AWS Access Key ID to be used when storing artifacts'
        required: true
        type: string
      aws-secret-access-key:
        description: 'AWS Secret Access Key to be used when storing artifacts'
        required: true
        type: string
      slack-webhook:
        description: 'Slack webhook url to send notification to.'
        required: true
        type: string
jobs:
  build-production-aleph-node:
    needs: [check-vars-and-secrets]
    name: Build production aleph-node
    uses: ./.github/workflows/_build-aleph-node.yml
    with:
      ref: ${{ github.ref }}
      production: true

  get-snapshot-and-sync:
    needs:
      - build-production-aleph-node
    name: Download snapshot and run
    runs-on: [self-hosted, Linux, X64, medium-1000GB]
    env:
      AWS_REGION: us-east-1
    steps:
      - name: Checkout source code
        uses: actions/checkout@v4

      - name: Download aleph-node from artifacts
        uses: actions/download-artifact@v4
        with:
          name: ${{ needs.build-production-aleph-node.outputs.artifact-name-binary }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ inputs.aws-access-key-id }}
          aws-secret-access-key: ${{ inputs.aws-secret-access-key }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get snapshot day
        id: get-snapshot-day
        shell: bash
        run: |
          if [[ '${{ inputs.snapshot-day }}' == "" ]]; then
            snapshot_day=$(date "+%Y-%m-%d")
          else
            snapshot_day='${{ inputs.snapshot-day }}'
          fi
          echo "snapshot-day=${snapshot_day}" >> $GITHUB_OUTPUT

      - name: Download snapshot and test db sync
        timeout-minutes: ${{ inputs.timeout }}
        run: |
          ./.github/scripts/test_db_sync.sh \
            ${{ inputs.args }} \
            --snapshot-day ${{ steps.get-snapshot-day.outputs.snapshot-day }} \
            --mark-snapshot-as-latest

      - name: Archive logs from failed test
        if: ${{ failure() }}
        shell: bash
        run: |
          tar -czvf aleph-node-logs.tar.gz running/aleph-node.log

      - name: Upload logs from failed e2e test
        if: ${{ failure() }}
        uses: actions/upload-artifact@v4
        with:
          path: aleph-node-logs.tar.gz
          name: aleph-node-logs.tar.gz
          if-no-files-found: error
          retention-days: 7

# uncomment before merge
#  slack-notification:
#    name: Slack notification
#    runs-on: ubuntu-20.04
#    needs: [get-snapshot-and-sync]
#    if: >
#      !cancelled() &&
#      github.event_name != 'workflow_dispatch'
#    steps:
#      - name: Send Slack message
#        uses: Cardinal-Cryptography/github-actions/slack-notification@v7
#        with:
#          notify-on: "failure"
#        env:
#          SLACK_WEBHOOK: ${{ inputs.slack-webhook }}
