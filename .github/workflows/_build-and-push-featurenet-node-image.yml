---
#  This workflow builds aleph-node docker imag
name: Build and push PR image to featurenets
on:
  workflow_call:
    inputs:
      ref:
        description: 'An aleph-node git ref to build image from.'
        type: string
        required: true
      fqdn-image:
        description: 'Full path to ECR docker image.'
        type: string
        required: true
      short-session:
        description: 'If true, build aleph-node with short_session enabled.'
        type: boolean
        required: true
jobs:
  build-test-node-and-runtime:
    if: ${{ inputs.short-session == true }}
    name: Build test node and runtime
    uses: ./.github/workflows/_build-test-node-and-runtime.yml
    with:
      ref: ${{ inputs.ref }}

  build-production-node-and-runtime:
    if: ${{ inputs.short-session != true }}
    name: Build production node and runtime
    uses: ./.github/workflows/_build-production-node-and-runtime.yml
    with:
      ref: ${{ inputs.ref }}

  build-and-push-featurnet-image-to-ecr:
    name: Build and push featurnet image
    needs: [build-test-node-and-runtime, build-production-node-and-runtime]
    # to prevent this job to be skipped as at least on of dependant jobs is skipped
    if: ${{ !cancelled() }}
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout aleph-node
        uses: actions/checkout@v4
        with:
          ref: ${{ inputs.ref }}
          fetch-depth: 0

      - name: Download aleph-node artifact
        uses: actions/download-artifact@v4
        env:
          TARGET_PATH: ${{ inputs.short-session == true && 'release' || 'production' }}
          ARTIFACT: ${{ inputs.short-session == true &&
            'aleph-test-node' || 'aleph-production-node' }}
        with:
          name: ${{ env.ARTIFACT }}
          path: target/release/

      - name: Build docker image with PR aleph-node binary
        run: |
          chmod +x target/release/aleph-node
          ls -alh target/release/
          ls -alh ./docker/
          docker build \
            --tag '${{ inputs.fqdn-image }}' \
            -f ./docker/Dockerfile .

      - name: Login to ECR
        uses: docker/login-action@v3
        with:
          registry: ${{ vars.ECR_PUBLIC_HOST }}
          username: ${{ secrets.AWS_MAINNET_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_MAINNET_SECRET_ACCESS_KEY }}

      - name: Push image to the ECR registry
        id: push-image
        run: |
          docker push '${{ inputs.fqdn-image }}'
