---
name: Nightly pipeline

on:
  push:
    branches:
      - A0-2174-fix-nightly-pipeline-failing-due-to-missing-artifact
  # schedule:
  #   - cron: '00 23 * * *'

concurrency:
  group: "${{ github.ref }}-${{ github.workflow }}-nightly"
  cancel-in-progress: true

jobs:
  build-new-production-node:
    name: Build production node and runtime artifacts (PR version)
    uses: ./.github/workflows/_build-production-node-and-runtime.yml
    secrets: inherit

  build-new-test-node:
    name: Build test node and runtime artifacts (PR version)
    uses: ./.github/workflows/_build-test-node-and-runtime.yml
    secrets: inherit

  build-test-docker:
    needs: [build-new-test-node]
    name: Build docker image with the test node artifact
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Download test artifact
        uses: actions/download-artifact@v3
        with:
          name: aleph-test-node
          path: target/release

      - name: Build test docker image
        id: build-image
        run: |
          chmod +x target/release/aleph-node
          docker build --tag aleph-node:latest -f ./docker/Dockerfile .
          docker save -o aleph-node.tar aleph-node:latest

      - name: Upload test docker image
        uses: actions/upload-artifact@v3
        with:
          name: aleph-test-docker
          path: aleph-node.tar
          if-no-files-found: error
          retention-days: 7

  build-synthetic-network-docker:
    needs: [build-test-docker]
    name: Build docker image with the test node artifact and support for synthetic-network
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Download artifact with docker image for aleph-node
        uses: actions/download-artifact@v3
        with:
          name: aleph-test-docker

      - name: Load node docker image
        shell: bash
        run: docker load -i aleph-node.tar

      - name: Build test docker image
        id: build-image
        run: |
          scripts/synthetic-network/build_synthetic-network.sh
          docker save -o aleph-node.tar aleph-node:syntheticnet

      - name: Upload test docker image
        uses: actions/upload-artifact@v3
        with:
          name: aleph-test-synthetic-docker
          path: aleph-node.tar
          if-no-files-found: error
          retention-days: 7

  run-e2e-high-out-latency:
    needs: [build-synthetic-network-docker, build-new-test-node]
    name: Run high out-latency test
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: high_out_latency_for_all
          image-path: aleph-test-synthetic-docker
          node-image: aleph-node:syntheticnet
          compose-file: docker/docker-compose.synthetic-network.yml
        timeout-minutes: 40

  run-e2e-no-quorum-without-high-out-latency:
    needs: [build-synthetic-network-docker, build-new-test-node]
    name: Run high out-latency for every quorum
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Run e2e test
        uses: ./.github/actions/run-e2e-test
        with:
          test-case: high_out_latency_for_each_quorum
          image-path: aleph-test-synthetic-docker
          node-image: aleph-node:syntheticnet
          compose-file: docker/docker-compose.synthetic-network.yml
        timeout-minutes: 25

  check-e2e-test-suite-completion:
    needs: [
      run-e2e-high-out-latency,
      run-e2e-no-quorum-without-high-out-latency,
    ]
    name: Check e2e test suite completion
    runs-on: ubuntu-20.04
    steps:
      - name: All e2e tests completed
        run: echo "All e2e tests completed."

  slack:
    name: Slack notification
    runs-on: ubuntu-20.04
    needs: [check-e2e-test-suite-completion]
    if: always()
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Send Slack message
        uses: ./.github/actions/slack-notification
        with:
          notify-on: "always"
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_NIGHTLY_PIPELINE }}
