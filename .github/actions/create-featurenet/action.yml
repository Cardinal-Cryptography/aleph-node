---
name: Create featurenet
description: |
  This action several flows
  * spawns new featurenet bootstraped from PR, node binary is test one (short session)
  * spawns new update net from a node image that is on ECR, prpduction one (normal session)
  * upgrades featurenet binary to a given version
inputs:
  gh-ci-token:
    description: 'GH token to be used in the action'
    required: true
  repo-featurenets-name:
    description: 'Name of the repository containing featurenets manifests'
    required: true
  argo-host:
    description: 'ArgoCD host'
    required: true
  argo-sync-user-token:
    description: 'ArgoCD user token to be used in the action'
    required: true
  ecr-public-registry:
    description: "ECR public registry, with slash at the end, eg. 'public.ecr.aws/something/'"
    required: true
  featurenet-keys-s3bucket-name:
    description: 'S3 bucket name with featurenet keys'
    required: true
  featurenet-name:
    description: 'Name of featurenet'
    required: true
  git-commit-author:
    description: 'Git commit author when pushing to featurenets repository'
    required: true
  git-commit-email:
    description: 'Git commit email when pushing to featurenets repository'
    required: true
  featurenet-aleph-node-image:
    description: |
      Set featurenet image either to:
       * 'testnet' or 'mainnet' - to Testnet or Mainnet image respectively,
       * a 7 byte SHA - to exisiting ECR aleph-node image tag
       * empty value - to image built from PR
    required: false
    default: ''
  expiration:
    description: 'Time after which updatenet will be removed'
    required: false
    default: ''
  rolling-update-partition:
    description: |
      Number from 0 to N-1, where N is size of am existing featurenet.
      All aleph-node-validator-N with an ordinal N that is great than or equal to the partition
      will be updated. If not specified, all nodes will be updated.
    required: false
    default: "0"
  replicas:
    description: |
      Number of pods to start, from 0 to 50.
    required: false
    default: "5"
  internal:
    description: 'Internal network, accessible from VPN only'
    required: false
    default: "false"
  hard-refresh:
    description: 'Make hard-refresh of ArgoCD application'
    required: false
    default: "false"
outputs:
  ws-hostname:
    description: Hostname of the WS endpoint
    value: ${{ steps.start-featurenet.outputs.ws-hostname }}

runs:
  using: "composite"
  steps:
    - name: Validate inputs
      shell: bash
      run: |
        if [[
          ! "${{ inputs.featurenet-name }}" =~ ^[a-z0-9][a-z0-9\-]{4,48}$
        ]]
        then
          echo "!!! Invalid featurenet name"
          exit 1
        fi
        if [[
          "${{ inputs.featurenet-aleph-node-image }}" != "" && \
          ! "${{ inputs.featurenet-aleph-node-image }}" =~ ^[a-f0-9]{7}$ && \
          "${{ inputs.featurenet-aleph-node-image }}" != "testnet" && \
          "${{ inputs.featurenet-aleph-node-image }}" != "mainnet"
        ]]
        then
          echo "!!! Invalid featurenet node image tag"
          exit 1
        fi
        if [[
          "${{ inputs.rolling-update-partition }}" != "" && \
          ! "${{ inputs.rolling-update-partition }}" =~ ^[0-9]$
        ]]
        then
          echo "!!! Expected rolling update partition to be a cardinal value from 0 to 9"
          exit 1
        fi
        if [[
          "${{ inputs.replicas }}" != "" && \
          ! "${{ inputs.replicas }}" =~ ^[0-9]{1,2}$ || "${{ inputs.replicas }}" -gt 50
        ]]
        then
          echo "!!! Expected replicas to be a cardinal value from 0 to 50"
          exit 1
        fi
        if [[
          "${{ inputs.expiration }}" != "" && \
          ! "${{ inputs.expiration }}" =~ ^[0-9]{1,6}h$ && \
          "${{ inputs.expiration }}" != "never"
        ]]
        then
          echo "!!! Expected expiration to have values from set {3h, 12h, 24h, 48h, 96h, never}"
          exit 1
        fi

    - name: Get branch name and commit SHA
      id: get-ref-properties
      uses: Cardinal-Cryptography/github-actions/get-ref-properties@v1

    - name: Checkout featurenets repo
      uses: actions/checkout@v3
      with:
        repository: Cardinal-Cryptography/${{ inputs.repo-featurenets-name }}
        token: ${{ inputs.gh-ci-token }}
        path: "${{ inputs.repo-featurenets-name }}"
        ref: main

    - name: Get node commit SHA
      if: ${{ inputs.featurenet-aleph-node-image == 'testnet' ||
        inputs.featurenet-aleph-node-image == 'mainnet' }}
      id: get-node-commit-sha
      uses: ./.github/actions/get-node-system-version
      with:
        env: ${{ inputs.featurenet-aleph-node-image }}

    - name: Start featurenet from PR branch
      id: start-featurenet
      shell: bash
      # yamllint disable rule:line-length
      run: |
        cd "${{ inputs.repo-featurenets-name }}"
        # featurenet creation from commit from PR
        if [[ "${{ inputs.featurenet-aleph-node-image }}" == "" ]]; then
          pr_image_tag="fe-${{ steps.get-ref-properties.outputs.branch-name-for-argo-with-sha }}"
          fnet_aleph_node_image="${{ inputs.ecr-public-registry }}feature-env-aleph-node:${pr_image_tag}"
          fnet_bootstrap_chain_node_image="${{ steps.get-ref-properties.outputs.sha }}"
          fnet_create_hook="false"
        # updatenet creation from Testnet or Mainnet image
        elif [[ "${{ inputs.featurenet-aleph-node-image }}" == "testnet" || \
            "${{ inputs.featurenet-aleph-node-image }}" == "mainnet" ]]; then
          ecr_image_tag="${{ steps.get-node-commit-sha.outputs.sha }}"
          fnet_aleph_node_image="${{ inputs.ecr-public-registry }}aleph-node:${ecr_image_tag}"
          fnet_bootstrap_chain_node_image="${{ inputs.featurenet-aleph-node-image }}"
          fnet_create_hook="false"
        # updatenet update, ie updating binary to given version and runtime update
        else
          fnet_aleph_node_image="${{ inputs.ecr-public-registry }}aleph-node:${{ inputs.featurenet-aleph-node-image }}"
          fnet_bootstrap_chain_node_image="none"
          # Disabling hook here as work in progress
          fnet_create_hook="false"
        fi
        ./Ops.sh create-featurenet-using-kustomize \
          "${{ inputs.featurenet-name }}" \
          "${fnet_aleph_node_image}" \
          "${fnet_bootstrap_chain_node_image}" \
          "${{ inputs.rolling-update-partition }}" \
          "${fnet_create_hook}" \
          "${{ inputs.replicas }}" \
          "${{ inputs.internal == 'true' && 'true' || 'false' }}" | tee -a tmp-opssh-createfeaturenet-output.txt

        ws_hostname=$(cat tmp-opssh-createfeaturenet-output.txt | grep "^__output:ws-hostname:" | cut -d: -f3)
        echo "ws-hostname=${ws_hostname}" >> $GITHUB_OUTPUT
      # yamllint enable rule:line-length

    - name: Set featurenet expiration
      if: inputs.expiration != ''
      shell: bash
      run: |
        cd "${{ inputs.repo-featurenets-name }}"
        ./Ops.sh create-featurenet-expiration \
          "${{ inputs.featurenet-name }}" \
          "${{ inputs.expiration }}"

    - name: Commit featurenet change
      uses: EndBug/add-and-commit@v9.1.1
      with:
        author_name: "${{ inputs.git-commit-author }}"
        author_email: "${{ inputs.git-commit-email }}"
        # yamllint disable-line rule:line-length
        message: "Upsert featurenet ${{ inputs.featurenet-name }} with image: ${{ inputs.featurenet-aleph-node-image != '' && inputs.featurenet-aleph-node-image || steps.get-ref-properties.outputs.branch-name-for-argo-with-sha }}"
        add: '["*.yaml","*.expiration.txt"]'
        cwd: "${{ inputs.repo-featurenets-name }}"

    - name: Refresh Argo and wait for the creation to be finished
      shell: bash
      run: |
        cd "${{ inputs.repo-featurenets-name }}"
        ./Ops.sh refresh-featurenets "${{ inputs.argo-host }}" \
          "${{ inputs.argo-sync-user-token }}" \
          "${{ inputs.featurenet-name }}" \
          "${{ inputs.hard-refresh == 'true' && 'true' || 'false' }}"
