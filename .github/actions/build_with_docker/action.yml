name: Build aleph-node with docker/nix
description: Build and cache aleph-node using docker and nix

inputs:
  crates:
    type: string
    required: false
    default: '{ "aleph-node" = []; }'
  store_result:
    type: boolean
    required: false
    default: false
  single_step:
    type: boolean
    required: false
    default: false
  store_in_cache_if_new:
    type: boolean
    required: false
    default: false

runs:
  using: "composite"
  steps:
    - name: Check if docker image is already loaded
      id: check_loaded
      shell: bash
      run: |
        CACHE_KEY="${{ hashFiles('**/Cargo.lock', '**/rust-toolchain', 'nix/*') }}-v0"
        if [ "$(docker image ls -q aleph-build:${CACHE_KEY})" == "" ]; then
          echo "::set-output name=loaded::false"
        else
          echo "::set-output name=loaded::true"
        fi
        echo "::set-output name=cache_key::${CACHE_KEY}"

    - name: Checkout docker image
      id: check_cache
      uses: actions/cache@v3
      with:
        path: |
          image.tar
        key: aleph-build-${{ steps.check_loaded.outputs.cache_key }}

    - name: Build
      shell: bash
      run: |
        if [ "${{ steps.check_loaded.outputs.loaded }}" == "false" ]; then
          if [ "${{ steps.check_cache.outputs.cache-hit }}" == "true" ]; then
            docker load -i image.tar
          else
            docker build -t aleph-build:${{ steps.check_loaded.outputs.cache_key }} -f nix/Dockerfile.build .
          fi
        fi
        rm image.tar 2>/dev/null || true

        export CRATES='${{ inputs.crates }}'
        export SINGLE_STEP='${{ inputs.single_step }}'
        rm -rf result
        docker run --name aleph-build -e CRATES -e SINGLE_STEP --volume=$(pwd):/node/build aleph-build:${{ steps.check_loaded.outputs.cache_key }}
        if [ "${{ inputs.store_result }}" == "true" ]; then
          docker commit aleph-build aleph-build:${{ steps.check_loaded.outputs.cache_key }}
        fi
        docker rm aleph-build
        if [ "${{ inputs.store_in_cache_if_new }}" == "true" && "${{ steps.check_cache.outputs.cache-hit }}" == "false" ]; then
          docker save -o image.tar aleph-build:${{ steps.check_loaded.outputs.cache_key }}
        fi
