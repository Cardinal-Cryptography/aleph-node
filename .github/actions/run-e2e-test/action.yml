---
name: 'Run e2e test'
description: 'Run single e2e test.'

inputs:
  node-count:
    description: 'Number of nodes to run.'
    required: false
    default: '5'
  test-case:
    description: 'Name of test to run.'
    required: true
  reserved-seats:
    description: 'Number of reserved seats available to validators.'
    required: false
  non-reserved-seats:
    description: 'Number of non-reserved seats available to validators.'
    required: false
  follow-up-finalization-check:
    description: 'Whether to run a follow-up finalization check.'
    required: false
  deploy-adder:
    description: 'Whether to deploy the adder sample contract to the node.'
    required: false
    default: 'false'
  image-path:
    description: 'Custom path to docker image for aleph-node'
    required: false
    default: aleph-test-docker
  node-image:
    description: 'Custom name of aleph-node image'
    required: false
    default: aleph-node:latest
  compose-file:
    description: 'Custom docker-compose configuration'
    required: false
    default: ''
  aleph-e2e-client-image:
    description: 'aleph-e2e-client image'
    required: true
  timeout-minutes:
    description: 'The maximum number of minutes to let a test run before it is canceled and
      considered failed'
    required: false
    default: 15

runs:
  using: 'composite'
  steps:
    - name: Checkout aleph-node sources
      uses: actions/checkout@v4

    - name: Call action get-ref-properties
      id: get-ref-properties
      uses: Cardinal-Cryptography/github-actions/get-ref-properties@v5

    - name: Download artifact with docker image
      uses: actions/download-artifact@v4
      with:
        name: ${{ inputs.image-path }}

    - name: Load node docker image
      shell: bash
      run: docker load -i aleph-node.tar

    - name: Run consensus party
      shell: bash
      run: |
        NODE_IMAGE='${{ inputs.node-image }}' \
        DOCKER_COMPOSE='${{ inputs.compose-file }}' \
          ./.github/scripts/run_consensus.sh -n '${{ inputs.node-count }}'

    - name: Download aleph-e2e-client artifact
      uses: actions/download-artifact@v4
      with:
        name: aleph-e2e-client

    - name: Load test suite docker image
      shell: bash
      run: docker load -i aleph-e2e-client.tar

    - name: Run single e2e test
      id: run-single-e2e-test
      shell: bash
      run: |
        ARGS=(
          -t '${{ inputs.test-case }}'
          -a '${{ inputs.aleph-e2e-client-image }}'
        )

        RESERVED_SEATS='${{ inputs.reserved-seats }}'
        NON_RESERVED_SEATS='${{ inputs.non-reserved-seats }}'

        if [[ -n "${RESERVED_SEATS}" && -n "${NON_RESERVED_SEATS}" ]]; then
          ARGS+=(
            -f "${RESERVED_SEATS}"
            -n "${NON_RESERVED_SEATS}"
          )
        fi

        DEPLOY_ADDER='${{ inputs.deploy-adder }}'

        if [[ "${DEPLOY_ADDER}" = "true" ]]; then
          pushd contracts/adder
          export ADDER=$(./deploy.sh)
          popd
        fi

        export TIMEOUT_MINUTES="${{ inputs.timeout-minutes }}m"
        ./.github/scripts/run_e2e_test.sh "${ARGS[@]}"

    - name: Get log tarball file name
      if: ${{ failure() }}
      id: get-log-tarball-file-name
      shell: bash
      run: |
        test_case_escaped=$(echo ${{ inputs.test-case }} | sed 's/::/-/g')
        echo "name=${test_case_escaped}" >> $GITHUB_OUTPUT

    - name: Archive logs from failed e2e test
      if: ${{ failure() }}
      shell: bash
      run: |
        ./.github/scripts/run_consensus.sh -n '${{ inputs.node-count }}' \
          --archive-logs \
          "aleph-node-${{ steps.get-log-tarball-file-name.outputs.name }}-e2e-failure.tgz"

    - name: Upload logs from failed e2e test
      if: ${{ failure() }}
      uses: actions/upload-artifact@v4
      with:
        path: aleph-node-${{ steps.get-log-tarball-file-name.outputs.name }}-e2e-failure.tgz
        name: aleph-node-${{ steps.get-log-tarball-file-name.outputs.name }}-e2e-failure.tgz
        if-no-files-found: error
        retention-days: 7

    - name: Run finalization e2e test
      if: inputs.follow-up-finalization-check == 'true'
      shell: bash
      run: |
        ./.github/scripts/run_e2e_test.sh -t finalization::finalization \
          -a '${{ inputs.aleph-e2e-client-image }}'
