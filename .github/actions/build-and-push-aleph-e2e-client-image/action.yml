---
name: Build and push aleph-e2e-client image
description: This workflow builds and pushes aleph-e2e-client image required for e2e tests
inputs:
  ref:
    description: "git ref: hash, branch, tag or 'mainnet' or 'testnet'"
    required: true
  aws-access-key-id:
    required: true
    description: 'AWS Access Key ID to be used when storing artifacts'
  aws-secret-access-key:
    required: true
    description: 'AWS Secret Access Key to be used when storing artifacts'
  ecr-public-host:
    required: true
    description: 'ECR public host'
  ecr-public-registry:
    required: true
    description: 'ECR public registry'
  push:
    required: false
    description: Set to 'true' to push aleph-e2e-client to ECR
outputs:
  aleph-e2e-client-image:
    description: Built aleph-e2e-client image name
    value: ${{ steps.push-aleph-e2e-client.outputs.image }}

runs:
  using: "composite"
  steps:
    - name: Checkout aleph-node source code
      uses: actions/checkout@v4
      with:
        ref: ${{ inputs.ref }}
        fetch-depth: 0

    - name: Call action get-ref-properties
      id: get-ref-properties
      uses: Cardinal-Cryptography/github-actions/get-ref-properties@v5

    - name: Install Rust toolchain
      uses: Cardinal-Cryptography/github-actions/install-rust-toolchain@v4
      with:
        targets: wasm32-unknown-unknown

    - name: Build aleph-e2e-client image
      shell: bash
      run: |
        cd e2e-tests/
        rm -f target/release/deps/aleph_e2e_client*
        cp $(cargo test --no-run --release --message-format=json | jq -r .executable | \
          grep aleph_e2e_client) target/release/aleph-e2e-client

    - name: Login to Public Amazon ECR
      if: ${{ inputs.push == 'true' }}
      uses: docker/login-action@v3
      with:
        registry: ${{ inputs.ecr-public-host }}
        username: ${{ inputs.aws-access-key-id }}
        password: ${{ inputs.aws-secret-access-key }}

    - name: Push aleph-e2e-client to ECR
      id: push-aleph-e2e-client
      env:
        IMAGE: aleph-e2e-client
        TAG: ${{ steps.get-ref-properties.outputs.sha }}
        REGISTRY: ${{ inputs.ecr-public-registry }}
      shell: bash
      run: |
        cd e2e-tests/
        registry='${{ env.REGISTRY }}'
        image_and_tag='${{ env.IMAGE }}:dev'
        docker build --tag ${image_and_tag} -f Dockerfile .
        docker save -o aleph-e2e-client.tar ${image_and_tag}
        echo "image=${image_and_tag}" >> $GITHUB_OUTPUT
        if [[ '${{ steps.get-ref-properties.outputs.branch }}' -eq 'main' && \
              '${{ inputs.push }}' == 'true' ]]; then
          docker tag ${image_and_tag} ${registry}'${{ env.IMAGE }}:${{ env.TAG }}'
          docker push ${registry}'${{ env.IMAGE }}:${{ env.TAG }}'
          docker tag ${image_and_tag} ${registry}'${{ env.IMAGE }}:latest'
          docker push ${registry}'${{ env.IMAGE }}:latest'
        fi

    # in order to prevent rate quota exceeded, on workflows which requires many aleph-e2e-client
    # runs, we download them from GH artifacts instead from ECR
    - name: Upload aleph-e2e-client artifact
      uses: actions/upload-artifact@v4
      with:
        name: aleph-e2e-client
        path: e2e-tests/aleph-e2e-client.tar
        if-no-files-found: error
        retention-days: 7
