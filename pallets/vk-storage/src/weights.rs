//! Autogenerated weights for pallet_vk_storage
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-12-13, STEPS: `20`, REPEAT: 5, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("chainspec.json"), DB CACHE: 1024

// Executed Command:
// target/release/aleph-node
// benchmark
// pallet
// --chain=chainspec.json
// --pallet=pallet_vk_storage
// --extrinsic=*
// --steps=20
// --repeat=5
// --template=.maintain/pallet-weight-template.hbs
// --wasm-execution=compiled
// --output=pallets/vk-storage/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_vk_storage.
pub trait WeightInfo {
    fn store_key(key_length: u32) -> Weight;
}

impl<I: BenchmarkInfo> WeightInfo for I {
    fn store_key(key_length: u32) -> Weight {
        <I as BenchmarkInfo>::store_key(key_length)
    }
}

/// Benchmark results for pallet_vk_storage.
trait BenchmarkInfo {
    fn store_key(l: u32, ) -> Weight;
}

/// Weights for pallet_vk_storage using the Substrate node and recommended hardware.
pub struct AlephWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> BenchmarkInfo for AlephWeight<T> {
    // Storage: `VkStorage::VerificationKeys` (r:0 w:1)
    // Proof: `VkStorage::VerificationKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `l` is `[1, 10000]`.
    fn store_key(l: u32, ) -> Weight {
        // Minimum execution time: 8_597 nanoseconds.
        Weight::from_parts(9_536_460_u64, 0)
            // Standard Error: 54
            .saturating_add(Weight::from_parts(1_123_u64, 0).saturating_mul(l as u64))
            .saturating_add(T::DbWeight::get().writes(1_u64))
    }
}

// For backwards compatibility and tests
impl BenchmarkInfo for () {
    // Storage: `VkStorage::VerificationKeys` (r:0 w:1)
    // Proof: `VkStorage::VerificationKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
    /// The range of component `l` is `[1, 10000]`.
    fn store_key(l: u32, ) -> Weight {
        // Minimum execution time: 8_597 nanoseconds.
        Weight::from_parts(9_536_460_u64, 0)
            // Standard Error: 54
            .saturating_add(Weight::from_parts(1_123_u64, 0).saturating_mul(l as u64))
            .saturating_add(RocksDbWeight::get().writes(1_u64))
    }
}
