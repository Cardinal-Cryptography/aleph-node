//! Autogenerated weights for pallet_snarcos
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-09, STEPS: `20`, REPEAT: 50, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("chainspec.json"), DB CACHE: 1024

// Executed Command:
// target/release/aleph-node
// benchmark
// pallet
// --chain=chainspec.json
// --pallet=pallet_snarcos
// --extrinsic=*
// --steps=20
// --repeat=50
// --template=.maintain/pallet-weight-template.hbs
// --execution=wasm
// --wasm-execution=compiled
// --output=pallets/snarcos/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_snarcos.
pub trait WeightInfo {
    // TODO: fill it with the methods that you actually need
}

impl<I: BenchmarkInfo> WeightInfo for I {
    // TODO: compile results from benchmarks
}

/// Benchmark results for pallet_snarcos.
trait BenchmarkInfo {
	fn store_key(l: u32, ) -> Weight;
	fn overwrite_key(l: u32, ) -> Weight;
	fn verify_groth16_xor() -> Weight;
	fn verify_groth16_linear_equation() -> Weight;
	fn verify_groth16_merkle_tree_8() -> Weight;
	fn verify_groth16_merkle_tree_64() -> Weight;
	fn verify_groth16_merkle_tree_1024() -> Weight;
	fn verify_gm17_xor() -> Weight;
	fn verify_gm17_linear_equation() -> Weight;
	fn verify_gm17_merkle_tree_8() -> Weight;
	fn verify_gm17_merkle_tree_64() -> Weight;
	fn verify_gm17_merkle_tree_1024() -> Weight;
	fn verify_marlin_xor() -> Weight;
	fn verify_marlin_linear_equation() -> Weight;
	fn verify_marlin_merkle_tree_8() -> Weight;
	fn verify_marlin_merkle_tree_64() -> Weight;
	fn verify_marlin_merkle_tree_1024() -> Weight;
}

/// Weights for pallet_snarcos using the Substrate node and recommended hardware.
pub struct AlephWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> BenchmarkInfo for AlephWeight<T> {
	// Storage: Snarcos VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn store_key(l: u32, ) -> Weight {
		// Minimum execution time: 27_400 nanoseconds.
		Weight::from_ref_time(27_843_271_u64)
			// Standard Error: 97
			.saturating_add(Weight::from_ref_time(1_785_u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn overwrite_key(l: u32, ) -> Weight {
		// Minimum execution time: 13_800 nanoseconds.
		Weight::from_ref_time(14_372_554_u64)
			// Standard Error: 54
			.saturating_add(Weight::from_ref_time(1_112_u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_xor() -> Weight {
		// Minimum execution time: 62_165_800 nanoseconds.
		Weight::from_ref_time(65_697_600_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_linear_equation() -> Weight {
		// Minimum execution time: 48_701_000 nanoseconds.
		Weight::from_ref_time(51_237_300_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_8() -> Weight {
		// Minimum execution time: 63_983_900 nanoseconds.
		Weight::from_ref_time(67_410_900_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_64() -> Weight {
		// Minimum execution time: 64_445_200 nanoseconds.
		Weight::from_ref_time(67_246_500_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_1024() -> Weight {
		// Minimum execution time: 64_601_200 nanoseconds.
		Weight::from_ref_time(68_110_300_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_xor() -> Weight {
		// Minimum execution time: 68_218_100 nanoseconds.
		Weight::from_ref_time(71_200_600_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_linear_equation() -> Weight {
		// Minimum execution time: 54_801_200 nanoseconds.
		Weight::from_ref_time(57_767_100_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_8() -> Weight {
		// Minimum execution time: 71_194_200 nanoseconds.
		Weight::from_ref_time(74_483_000_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_64() -> Weight {
		// Minimum execution time: 71_401_800 nanoseconds.
		Weight::from_ref_time(73_261_700_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_1024() -> Weight {
		// Minimum execution time: 70_383_500 nanoseconds.
		Weight::from_ref_time(74_075_900_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_xor() -> Weight {
		// Minimum execution time: 107_691_000 nanoseconds.
		Weight::from_ref_time(110_530_300_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_linear_equation() -> Weight {
		// Minimum execution time: 105_122_400 nanoseconds.
		Weight::from_ref_time(108_778_600_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_8() -> Weight {
		// Minimum execution time: 104_590_300 nanoseconds.
		Weight::from_ref_time(107_496_200_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_64() -> Weight {
		// Minimum execution time: 105_560_800 nanoseconds.
		Weight::from_ref_time(109_135_900_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_1024() -> Weight {
		// Minimum execution time: 105_569_400 nanoseconds.
		Weight::from_ref_time(108_782_100_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
}

// For backwards compatibility and tests
impl BenchmarkInfo for () {
	// Storage: Snarcos VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn store_key(l: u32, ) -> Weight {
		// Minimum execution time: 27_400 nanoseconds.
		Weight::from_ref_time(27_843_271_u64)
			// Standard Error: 97
			.saturating_add(Weight::from_ref_time(1_785_u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn overwrite_key(l: u32, ) -> Weight {
		// Minimum execution time: 13_800 nanoseconds.
		Weight::from_ref_time(14_372_554_u64)
			// Standard Error: 54
			.saturating_add(Weight::from_ref_time(1_112_u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_xor() -> Weight {
		// Minimum execution time: 62_165_800 nanoseconds.
		Weight::from_ref_time(65_697_600_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_linear_equation() -> Weight {
		// Minimum execution time: 48_701_000 nanoseconds.
		Weight::from_ref_time(51_237_300_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_8() -> Weight {
		// Minimum execution time: 63_983_900 nanoseconds.
		Weight::from_ref_time(67_410_900_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_64() -> Weight {
		// Minimum execution time: 64_445_200 nanoseconds.
		Weight::from_ref_time(67_246_500_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_1024() -> Weight {
		// Minimum execution time: 64_601_200 nanoseconds.
		Weight::from_ref_time(68_110_300_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_xor() -> Weight {
		// Minimum execution time: 68_218_100 nanoseconds.
		Weight::from_ref_time(71_200_600_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_linear_equation() -> Weight {
		// Minimum execution time: 54_801_200 nanoseconds.
		Weight::from_ref_time(57_767_100_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_8() -> Weight {
		// Minimum execution time: 71_194_200 nanoseconds.
		Weight::from_ref_time(74_483_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_64() -> Weight {
		// Minimum execution time: 71_401_800 nanoseconds.
		Weight::from_ref_time(73_261_700_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_1024() -> Weight {
		// Minimum execution time: 70_383_500 nanoseconds.
		Weight::from_ref_time(74_075_900_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_xor() -> Weight {
		// Minimum execution time: 107_691_000 nanoseconds.
		Weight::from_ref_time(110_530_300_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_linear_equation() -> Weight {
		// Minimum execution time: 105_122_400 nanoseconds.
		Weight::from_ref_time(108_778_600_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_8() -> Weight {
		// Minimum execution time: 104_590_300 nanoseconds.
		Weight::from_ref_time(107_496_200_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_64() -> Weight {
		// Minimum execution time: 105_560_800 nanoseconds.
		Weight::from_ref_time(109_135_900_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_1024() -> Weight {
		// Minimum execution time: 105_569_400 nanoseconds.
		Weight::from_ref_time(108_782_100_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
}
