//! Autogenerated weights for pallet_snarcos
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-09, STEPS: `20`, REPEAT: 50, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("chainspec.json"), DB CACHE: 1024

// Executed Command:
// target/release/aleph-node
// benchmark
// pallet
// --chain=chainspec.json
// --pallet=pallet_snarcos
// --extrinsic=*
// --steps=20
// --repeat=50
// --template=.maintain/pallet-weight-template.hbs
// --execution=wasm
// --wasm-execution=compiled
// --output=pallets/snarcos/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_snarcos.
pub trait WeightInfo {
	fn store_key(key_length: u32) -> Weight;
	fn overwrite_key(key_length: u32) -> Weight;
	fn verify_groth16() -> Weight;
	fn verify_gm17() -> Weight;
	fn verify_marlin() -> Weight;
}

impl<I: BenchmarkInfo> WeightInfo for I {
	fn store_key(key_length: u32) -> Weight {
		<I as BenchmarkInfo>::store_key(key_length)
	}

	fn overwrite_key(key_length: u32) -> Weight {
		<I as BenchmarkInfo>::overwrite_key(key_length)
	}

	fn verify_groth16() -> Weight {
		<I as BenchmarkInfo>::verify_groth16_xor()
			.max(<I as BenchmarkInfo>::verify_groth16_linear_equation())
			.max(<I as BenchmarkInfo>::verify_groth16_merkle_tree_8())
			.max(<I as BenchmarkInfo>::verify_groth16_merkle_tree_64())
			.max(<I as BenchmarkInfo>::verify_groth16_merkle_tree_1024())
	}

	fn verify_gm17() -> Weight {
		<I as BenchmarkInfo>::verify_gm17_xor()
			.max(<I as BenchmarkInfo>::verify_gm17_linear_equation())
			.max(<I as BenchmarkInfo>::verify_gm17_merkle_tree_8())
			.max(<I as BenchmarkInfo>::verify_gm17_merkle_tree_64())
			.max(<I as BenchmarkInfo>::verify_gm17_merkle_tree_1024())
	}

	fn verify_marlin() -> Weight {
		<I as BenchmarkInfo>::verify_marlin_xor()
			.max(<I as BenchmarkInfo>::verify_marlin_linear_equation())
			.max(<I as BenchmarkInfo>::verify_marlin_merkle_tree_8())
			.max(<I as BenchmarkInfo>::verify_marlin_merkle_tree_64())
			.max(<I as BenchmarkInfo>::verify_marlin_merkle_tree_1024())
	}
}

/// Benchmark results for pallet_snarcos.
trait BenchmarkInfo {
	fn store_key(l: u32, ) -> Weight;
	fn overwrite_key(l: u32, ) -> Weight;
	fn verify_groth16_xor() -> Weight;
	fn verify_groth16_linear_equation() -> Weight;
	fn verify_groth16_merkle_tree_8() -> Weight;
	fn verify_groth16_merkle_tree_64() -> Weight;
	fn verify_groth16_merkle_tree_1024() -> Weight;
	fn verify_gm17_xor() -> Weight;
	fn verify_gm17_linear_equation() -> Weight;
	fn verify_gm17_merkle_tree_8() -> Weight;
	fn verify_gm17_merkle_tree_64() -> Weight;
	fn verify_gm17_merkle_tree_1024() -> Weight;
	fn verify_marlin_xor() -> Weight;
	fn verify_marlin_linear_equation() -> Weight;
	fn verify_marlin_merkle_tree_8() -> Weight;
	fn verify_marlin_merkle_tree_64() -> Weight;
	fn verify_marlin_merkle_tree_1024() -> Weight;
}

/// Weights for pallet_snarcos using the Substrate node and recommended hardware.
pub struct AlephWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> BenchmarkInfo for AlephWeight<T> {
	// Storage: Snarcos VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn store_key(l: u32, ) -> Weight {
		// Minimum execution time: 30_000 nanoseconds.
		Weight::from_ref_time(32_299_232_u64)
			// Standard Error: 15
			.saturating_add(Weight::from_ref_time(942_u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn overwrite_key(l: u32, ) -> Weight {
		// Minimum execution time: 12_900 nanoseconds.
		Weight::from_ref_time(14_862_789_u64)
			// Standard Error: 14
			.saturating_add(Weight::from_ref_time(775_u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_xor() -> Weight {
		// Minimum execution time: 61_402_300 nanoseconds.
		Weight::from_ref_time(65_314_300_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_linear_equation() -> Weight {
		// Minimum execution time: 48_569_500 nanoseconds.
		Weight::from_ref_time(50_734_900_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_8() -> Weight {
		// Minimum execution time: 64_023_300 nanoseconds.
		Weight::from_ref_time(67_766_700_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_64() -> Weight {
		// Minimum execution time: 64_113_600 nanoseconds.
		Weight::from_ref_time(70_701_700_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_1024() -> Weight {
		// Minimum execution time: 64_493_700 nanoseconds.
		Weight::from_ref_time(67_180_100_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_xor() -> Weight {
		// Minimum execution time: 68_685_600 nanoseconds.
		Weight::from_ref_time(71_377_600_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_linear_equation() -> Weight {
		// Minimum execution time: 55_137_700 nanoseconds.
		Weight::from_ref_time(57_216_900_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_8() -> Weight {
		// Minimum execution time: 71_122_100 nanoseconds.
		Weight::from_ref_time(74_161_800_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_64() -> Weight {
		// Minimum execution time: 71_776_100 nanoseconds.
		Weight::from_ref_time(73_705_800_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_1024() -> Weight {
		// Minimum execution time: 70_291_300 nanoseconds.
		Weight::from_ref_time(73_826_000_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_xor() -> Weight {
		// Minimum execution time: 106_646_900 nanoseconds.
		Weight::from_ref_time(110_121_300_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_linear_equation() -> Weight {
		// Minimum execution time: 106_453_200 nanoseconds.
		Weight::from_ref_time(108_935_600_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_8() -> Weight {
		// Minimum execution time: 104_957_100 nanoseconds.
		Weight::from_ref_time(108_131_400_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_64() -> Weight {
		// Minimum execution time: 106_271_000 nanoseconds.
		Weight::from_ref_time(110_565_600_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_1024() -> Weight {
		// Minimum execution time: 105_058_500 nanoseconds.
		Weight::from_ref_time(111_031_400_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
}

// For backwards compatibility and tests
impl BenchmarkInfo for () {
	// Storage: Snarcos VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn store_key(l: u32, ) -> Weight {
		// Minimum execution time: 30_000 nanoseconds.
		Weight::from_ref_time(32_299_232_u64)
			// Standard Error: 15
			.saturating_add(Weight::from_ref_time(942_u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn overwrite_key(l: u32, ) -> Weight {
		// Minimum execution time: 12_900 nanoseconds.
		Weight::from_ref_time(14_862_789_u64)
			// Standard Error: 14
			.saturating_add(Weight::from_ref_time(775_u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_xor() -> Weight {
		// Minimum execution time: 61_402_300 nanoseconds.
		Weight::from_ref_time(65_314_300_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_linear_equation() -> Weight {
		// Minimum execution time: 48_569_500 nanoseconds.
		Weight::from_ref_time(50_734_900_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_8() -> Weight {
		// Minimum execution time: 64_023_300 nanoseconds.
		Weight::from_ref_time(67_766_700_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_64() -> Weight {
		// Minimum execution time: 64_113_600 nanoseconds.
		Weight::from_ref_time(70_701_700_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_1024() -> Weight {
		// Minimum execution time: 64_493_700 nanoseconds.
		Weight::from_ref_time(67_180_100_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_xor() -> Weight {
		// Minimum execution time: 68_685_600 nanoseconds.
		Weight::from_ref_time(71_377_600_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_linear_equation() -> Weight {
		// Minimum execution time: 55_137_700 nanoseconds.
		Weight::from_ref_time(57_216_900_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_8() -> Weight {
		// Minimum execution time: 71_122_100 nanoseconds.
		Weight::from_ref_time(74_161_800_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_64() -> Weight {
		// Minimum execution time: 71_776_100 nanoseconds.
		Weight::from_ref_time(73_705_800_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_1024() -> Weight {
		// Minimum execution time: 70_291_300 nanoseconds.
		Weight::from_ref_time(73_826_000_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_xor() -> Weight {
		// Minimum execution time: 106_646_900 nanoseconds.
		Weight::from_ref_time(110_121_300_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_linear_equation() -> Weight {
		// Minimum execution time: 106_453_200 nanoseconds.
		Weight::from_ref_time(108_935_600_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_8() -> Weight {
		// Minimum execution time: 104_957_100 nanoseconds.
		Weight::from_ref_time(108_131_400_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_64() -> Weight {
		// Minimum execution time: 106_271_000 nanoseconds.
		Weight::from_ref_time(110_565_600_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_1024() -> Weight {
		// Minimum execution time: 105_058_500 nanoseconds.
		Weight::from_ref_time(111_031_400_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
}
