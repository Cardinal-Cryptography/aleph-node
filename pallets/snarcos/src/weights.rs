//! Autogenerated weights for pallet_snarcos
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-15, STEPS: `20`, REPEAT: 50, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("chainspec.json"), DB CACHE: 1024

// Executed Command:
// target/release/aleph-node
// benchmark
// pallet
// --chain=chainspec.json
// --pallet=pallet_snarcos
// --extrinsic=*
// --steps=20
// --repeat=50
// --template=.maintain/pallet-weight-template.hbs
// --execution=wasm
// --wasm-execution=compiled
// --output=pallets/snarcos/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_snarcos.
pub trait WeightInfo {
	fn store_key(key_length: u32) -> Weight;
	fn overwrite_key(key_length: u32) -> Weight;
	fn verify_groth16() -> Weight;
	fn verify_gm17() -> Weight;
	fn verify_marlin() -> Weight;
	fn verify_data_too_long(excess: u32) -> Weight;
	fn verify_data_decoding_fails(data_length: u32) -> Weight;
	fn verify_key_decoding_fails(key_length: u32) -> Weight;
}

impl<I: BenchmarkInfo> WeightInfo for I {
	fn store_key(key_length: u32) -> Weight {
		<I as BenchmarkInfo>::store_key(key_length)
	}

	fn overwrite_key(key_length: u32) -> Weight {
		<I as BenchmarkInfo>::overwrite_key(key_length)
	}

	fn verify_groth16() -> Weight {
		<I as BenchmarkInfo>::verify_groth16_xor()
			.max(<I as BenchmarkInfo>::verify_groth16_linear_equation())
			.max(<I as BenchmarkInfo>::verify_groth16_merkle_tree_8())
			.max(<I as BenchmarkInfo>::verify_groth16_merkle_tree_64())
			.max(<I as BenchmarkInfo>::verify_groth16_merkle_tree_1024())
	}

	fn verify_gm17() -> Weight {
		<I as BenchmarkInfo>::verify_gm17_xor()
			.max(<I as BenchmarkInfo>::verify_gm17_linear_equation())
			.max(<I as BenchmarkInfo>::verify_gm17_merkle_tree_8())
			.max(<I as BenchmarkInfo>::verify_gm17_merkle_tree_64())
			.max(<I as BenchmarkInfo>::verify_gm17_merkle_tree_1024())
	}

	fn verify_marlin() -> Weight {
		<I as BenchmarkInfo>::verify_marlin_xor()
			.max(<I as BenchmarkInfo>::verify_marlin_linear_equation())
			.max(<I as BenchmarkInfo>::verify_marlin_merkle_tree_8())
			.max(<I as BenchmarkInfo>::verify_marlin_merkle_tree_64())
			.max(<I as BenchmarkInfo>::verify_marlin_merkle_tree_1024())
	}

	fn verify_data_too_long(excess: u32) -> Weight {
		<I as BenchmarkInfo>::verify_data_too_long(excess)
	}

	fn verify_data_decoding_fails(data_length: u32) -> Weight {
		<I as BenchmarkInfo>::verify_data_decoding_fails(data_length)
	}

	fn verify_key_decoding_fails(key_length: u32) -> Weight {
		<I as BenchmarkInfo>::verify_key_decoding_fails(key_length)
	}
}

/// Benchmark results for pallet_snarcos.
trait BenchmarkInfo {
	fn store_key(l: u32, ) -> Weight;
	fn overwrite_key(l: u32, ) -> Weight;
	fn verify_groth16_xor() -> Weight;
	fn verify_groth16_linear_equation() -> Weight;
	fn verify_groth16_merkle_tree_8() -> Weight;
	fn verify_groth16_merkle_tree_64() -> Weight;
	fn verify_groth16_merkle_tree_1024() -> Weight;
	fn verify_gm17_xor() -> Weight;
	fn verify_gm17_linear_equation() -> Weight;
	fn verify_gm17_merkle_tree_8() -> Weight;
	fn verify_gm17_merkle_tree_64() -> Weight;
	fn verify_gm17_merkle_tree_1024() -> Weight;
	fn verify_marlin_xor() -> Weight;
	fn verify_marlin_linear_equation() -> Weight;
	fn verify_marlin_merkle_tree_8() -> Weight;
	fn verify_marlin_merkle_tree_64() -> Weight;
	fn verify_marlin_merkle_tree_1024() -> Weight;
	fn verify_data_too_long(e: u32, ) -> Weight;
	fn verify_data_decoding_fails(l: u32, ) -> Weight;
	fn verify_key_decoding_fails(l: u32, ) -> Weight;
}

/// Weights for pallet_snarcos using the Substrate node and recommended hardware.
pub struct AlephWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> BenchmarkInfo for AlephWeight<T> {
	// Storage: Snarcos VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn store_key(l: u32, ) -> Weight {
		// Minimum execution time: 13_339 nanoseconds.
		Weight::from_ref_time(14_325_266_u64)
			// Standard Error: 5
			.saturating_add(Weight::from_ref_time(447_u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn overwrite_key(_l: u32, ) -> Weight {
		// Minimum execution time: 13_052 nanoseconds.
		Weight::from_ref_time(17_358_333_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_xor() -> Weight {
		// Minimum execution time: 39_940_549 nanoseconds.
		Weight::from_ref_time(42_493_264_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_linear_equation() -> Weight {
		// Minimum execution time: 31_639_198 nanoseconds.
		Weight::from_ref_time(32_306_346_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_8() -> Weight {
		// Minimum execution time: 41_828_738 nanoseconds.
		Weight::from_ref_time(42_100_627_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_64() -> Weight {
		// Minimum execution time: 41_895_270 nanoseconds.
		Weight::from_ref_time(42_149_212_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_1024() -> Weight {
		// Minimum execution time: 41_874_845 nanoseconds.
		Weight::from_ref_time(42_103_629_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_xor() -> Weight {
		// Minimum execution time: 44_611_925 nanoseconds.
		Weight::from_ref_time(45_614_670_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_linear_equation() -> Weight {
		// Minimum execution time: 36_369_304 nanoseconds.
		Weight::from_ref_time(36_862_685_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_8() -> Weight {
		// Minimum execution time: 46_572_698 nanoseconds.
		Weight::from_ref_time(52_386_658_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_64() -> Weight {
		// Minimum execution time: 46_837_112 nanoseconds.
		Weight::from_ref_time(47_172_148_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_1024() -> Weight {
		// Minimum execution time: 47_097_757 nanoseconds.
		Weight::from_ref_time(47_362_665_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_xor() -> Weight {
		// Minimum execution time: 69_932_264 nanoseconds.
		Weight::from_ref_time(72_348_152_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_linear_equation() -> Weight {
		// Minimum execution time: 70_242_257 nanoseconds.
		Weight::from_ref_time(72_840_577_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_8() -> Weight {
		// Minimum execution time: 69_459_911 nanoseconds.
		Weight::from_ref_time(70_503_101_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_64() -> Weight {
		// Minimum execution time: 69_982_474 nanoseconds.
		Weight::from_ref_time(71_737_936_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_1024() -> Weight {
		// Minimum execution time: 71_927_536 nanoseconds.
		Weight::from_ref_time(73_869_145_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}

	fn verify_data_too_long(e: u32) -> Weight {
		todo!()
	}

	/// The range of component `l` is `[1, 10000]`.
	fn verify_data_decoding_fails(_l: u32, ) -> Weight {
		// Minimum execution time: 5_645 nanoseconds.
		Weight::from_ref_time(6_651_822_u64)
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	/// The range of component `l` is `[1, 10000]`.
	fn verify_key_decoding_fails(l: u32, ) -> Weight {
		// Minimum execution time: 5_294_689 nanoseconds.
		Weight::from_ref_time(5_739_822_904_u64)
			// Standard Error: 3_601
			.saturating_add(Weight::from_ref_time(9_476_u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
}

// For backwards compatibility and tests
impl BenchmarkInfo for () {
	// Storage: Snarcos VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn store_key(l: u32, ) -> Weight {
		// Minimum execution time: 13_339 nanoseconds.
		Weight::from_ref_time(14_325_266_u64)
			// Standard Error: 5
			.saturating_add(Weight::from_ref_time(447_u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn overwrite_key(_l: u32, ) -> Weight {
		// Minimum execution time: 13_052 nanoseconds.
		Weight::from_ref_time(17_358_333_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_xor() -> Weight {
		// Minimum execution time: 39_940_549 nanoseconds.
		Weight::from_ref_time(42_493_264_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_linear_equation() -> Weight {
		// Minimum execution time: 31_639_198 nanoseconds.
		Weight::from_ref_time(32_306_346_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_8() -> Weight {
		// Minimum execution time: 41_828_738 nanoseconds.
		Weight::from_ref_time(42_100_627_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_64() -> Weight {
		// Minimum execution time: 41_895_270 nanoseconds.
		Weight::from_ref_time(42_149_212_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_1024() -> Weight {
		// Minimum execution time: 41_874_845 nanoseconds.
		Weight::from_ref_time(42_103_629_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_xor() -> Weight {
		// Minimum execution time: 44_611_925 nanoseconds.
		Weight::from_ref_time(45_614_670_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_linear_equation() -> Weight {
		// Minimum execution time: 36_369_304 nanoseconds.
		Weight::from_ref_time(36_862_685_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_8() -> Weight {
		// Minimum execution time: 46_572_698 nanoseconds.
		Weight::from_ref_time(52_386_658_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_64() -> Weight {
		// Minimum execution time: 46_837_112 nanoseconds.
		Weight::from_ref_time(47_172_148_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_1024() -> Weight {
		// Minimum execution time: 47_097_757 nanoseconds.
		Weight::from_ref_time(47_362_665_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_xor() -> Weight {
		// Minimum execution time: 69_932_264 nanoseconds.
		Weight::from_ref_time(72_348_152_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_linear_equation() -> Weight {
		// Minimum execution time: 70_242_257 nanoseconds.
		Weight::from_ref_time(72_840_577_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_8() -> Weight {
		// Minimum execution time: 69_459_911 nanoseconds.
		Weight::from_ref_time(70_503_101_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_64() -> Weight {
		// Minimum execution time: 69_982_474 nanoseconds.
		Weight::from_ref_time(71_737_936_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_1024() -> Weight {
		// Minimum execution time: 71_927_536 nanoseconds.
		Weight::from_ref_time(73_869_145_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}

	fn verify_data_too_long(e: u32) -> Weight {
		todo!()
	}

	/// The range of component `l` is `[1, 10000]`.
	fn verify_data_decoding_fails(_l: u32, ) -> Weight {
		// Minimum execution time: 5_645 nanoseconds.
		Weight::from_ref_time(6_651_822_u64)
	}
	// Storage: Snarcos VerificationKeys (r:1 w:0)
	/// The range of component `l` is `[1, 10000]`.
	fn verify_key_decoding_fails(l: u32, ) -> Weight {
		// Minimum execution time: 5_294_689 nanoseconds.
		Weight::from_ref_time(5_739_822_904_u64)
			// Standard Error: 3_601
			.saturating_add(Weight::from_ref_time(9_476_u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
}
