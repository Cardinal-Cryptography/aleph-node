//! Autogenerated weights for pallet_snarcos
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-10-11, STEPS: `50`, REPEAT: 100, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: None, WASM-EXECUTION: Compiled, CHAIN: Some("/tmp/chainspec.json"), DB CACHE: 1024

// Executed Command:
// ./target/release/aleph-node
// benchmark
// pallet
// --chain
// /tmp/chainspec.json
// --wasm-execution=compiled
// --pallet
// pallet_snarcos
// --extrinsic
// *
// --steps
// 50
// --repeat
// 100
// --output
// pallets/snarcos/src/weights.rs
// --template
// .maintain/pallet-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_snarcos.
pub trait WeightInfo {
	fn store_key(l: u32, ) -> Weight;
}

/// Weights for pallet_snarcos using the Substrate node and recommended hardware.
pub struct AlephWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> WeightInfo for AlephWeight<T> {
	// Storage: Snarcos VerificationKeys (r:1 w:1)
	fn store_key(_l: u32, ) -> Weight {
		(7_254_000 as Weight)
			.saturating_add(T::DbWeight::get().reads(1 as Weight))
			.saturating_add(T::DbWeight::get().writes(1 as Weight))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: Snarcos VerificationKeys (r:1 w:1)
	fn store_key(_l: u32, ) -> Weight {
		(7_254_000 as Weight)
			.saturating_add(RocksDbWeight::get().reads(1 as Weight))
			.saturating_add(RocksDbWeight::get().writes(1 as Weight))
	}
}
