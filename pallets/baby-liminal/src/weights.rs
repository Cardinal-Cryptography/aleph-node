//! Autogenerated weights for pallet_baby_liminal
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2022-12-15, STEPS: `20`, REPEAT: 50, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("chainspec.json"), DB CACHE: 1024

// Executed Command:
// target/release/aleph-node
// benchmark
// pallet
// --chain=chainspec.json
// --pallet=pallet_baby_liminal
// --extrinsic=*
// --steps=20
// --repeat=50
// --template=.maintain/pallet-weight-template.hbs
// --execution=wasm
// --wasm-execution=compiled
// --output=pallets/baby-liminal/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_baby_liminal.
pub trait WeightInfo {
	fn store_key(key_length: u32) -> Weight;
	fn overwrite_key(key_length: u32) -> Weight;
	fn verify_groth16() -> Weight;
	fn verify_gm17() -> Weight;
	fn verify_marlin() -> Weight;
	fn verify_data_too_long(excess: u32) -> Weight;
	fn verify_data_deserializing_fails(data_length: u32) -> Weight;
	fn verify_key_deserializing_fails(key_length: u32) -> Weight;
}

impl<I: BenchmarkInfo> WeightInfo for I {
	fn store_key(key_length: u32) -> Weight {
		<I as BenchmarkInfo>::store_key(key_length)
	}

	fn overwrite_key(key_length: u32) -> Weight {
		<I as BenchmarkInfo>::overwrite_key(key_length)
	}

	fn verify_groth16() -> Weight {
		<I as BenchmarkInfo>::verify_groth16_xor()
			.max(<I as BenchmarkInfo>::verify_groth16_linear_equation())
			.max(<I as BenchmarkInfo>::verify_groth16_merkle_tree_8())
			.max(<I as BenchmarkInfo>::verify_groth16_merkle_tree_64())
			.max(<I as BenchmarkInfo>::verify_groth16_merkle_tree_1024())
	}

	fn verify_gm17() -> Weight {
		<I as BenchmarkInfo>::verify_gm17_xor()
			.max(<I as BenchmarkInfo>::verify_gm17_linear_equation())
			.max(<I as BenchmarkInfo>::verify_gm17_merkle_tree_8())
			.max(<I as BenchmarkInfo>::verify_gm17_merkle_tree_64())
			.max(<I as BenchmarkInfo>::verify_gm17_merkle_tree_1024())
	}

	fn verify_marlin() -> Weight {
		<I as BenchmarkInfo>::verify_marlin_xor()
			.max(<I as BenchmarkInfo>::verify_marlin_linear_equation())
			.max(<I as BenchmarkInfo>::verify_marlin_merkle_tree_8())
			.max(<I as BenchmarkInfo>::verify_marlin_merkle_tree_64())
			.max(<I as BenchmarkInfo>::verify_marlin_merkle_tree_1024())
	}

	fn verify_data_too_long(excess: u32) -> Weight {
		<I as BenchmarkInfo>::verify_data_too_long(excess)
	}

	fn verify_data_deserializing_fails(data_length: u32) -> Weight {
		<I as BenchmarkInfo>::verify_data_deserializing_fails(data_length)
	}

	fn verify_key_deserializing_fails(key_length: u32) -> Weight {
		<I as BenchmarkInfo>::verify_key_deserializing_fails(key_length)
	}
}

/// Benchmark results for pallet_baby_liminal.
trait BenchmarkInfo {
	fn store_key(l: u32, ) -> Weight;
	fn overwrite_key(l: u32, ) -> Weight;
	fn verify_groth16_xor() -> Weight;
	fn verify_groth16_linear_equation() -> Weight;
	fn verify_groth16_merkle_tree_8() -> Weight;
	fn verify_groth16_merkle_tree_64() -> Weight;
	fn verify_groth16_merkle_tree_1024() -> Weight;
	fn verify_gm17_xor() -> Weight;
	fn verify_gm17_linear_equation() -> Weight;
	fn verify_gm17_merkle_tree_8() -> Weight;
	fn verify_gm17_merkle_tree_64() -> Weight;
	fn verify_gm17_merkle_tree_1024() -> Weight;
	fn verify_marlin_xor() -> Weight;
	fn verify_marlin_linear_equation() -> Weight;
	fn verify_marlin_merkle_tree_8() -> Weight;
	fn verify_marlin_merkle_tree_64() -> Weight;
	fn verify_marlin_merkle_tree_1024() -> Weight;
	fn verify_data_too_long(e: u32, ) -> Weight;
	fn verify_data_deserializing_fails(l: u32, ) -> Weight;
	fn verify_key_deserializing_fails(l: u32, ) -> Weight;
}

/// Weights for pallet_baby_liminal using the Substrate node and recommended hardware.
pub struct AlephWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> BenchmarkInfo for AlephWeight<T> {
	// Storage: BabyLiminal VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn store_key(l: u32, ) -> Weight {
		// Minimum execution time: 13_474 nanoseconds.
		Weight::from_ref_time(14_465_875_u64)
			// Standard Error: 29
			.saturating_add(Weight::from_ref_time(567_u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn overwrite_key(l: u32, ) -> Weight {
		// Minimum execution time: 12_801 nanoseconds.
		Weight::from_ref_time(13_299_939_u64)
			// Standard Error: 40
			.saturating_add(Weight::from_ref_time(706_u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_groth16_xor() -> Weight {
		// Minimum execution time: 40_835_989 nanoseconds.
		Weight::from_ref_time(41_360_423_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_groth16_linear_equation() -> Weight {
		// Minimum execution time: 32_639_940 nanoseconds.
		Weight::from_ref_time(33_183_542_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_8() -> Weight {
		// Minimum execution time: 43_535_647 nanoseconds.
		Weight::from_ref_time(44_534_826_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_64() -> Weight {
		// Minimum execution time: 43_736_277 nanoseconds.
		Weight::from_ref_time(44_928_816_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_1024() -> Weight {
		// Minimum execution time: 44_398_502 nanoseconds.
		Weight::from_ref_time(45_404_315_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_gm17_xor() -> Weight {
		// Minimum execution time: 47_317_978 nanoseconds.
		Weight::from_ref_time(48_630_811_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_gm17_linear_equation() -> Weight {
		// Minimum execution time: 37_869_011 nanoseconds.
		Weight::from_ref_time(39_424_421_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_8() -> Weight {
		// Minimum execution time: 50_106_274 nanoseconds.
		Weight::from_ref_time(50_982_596_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_64() -> Weight {
		// Minimum execution time: 50_371_264 nanoseconds.
		Weight::from_ref_time(51_318_930_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_1024() -> Weight {
		// Minimum execution time: 51_354_405 nanoseconds.
		Weight::from_ref_time(55_320_255_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_marlin_xor() -> Weight {
		// Minimum execution time: 72_380_865 nanoseconds.
		Weight::from_ref_time(76_175_990_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_marlin_linear_equation() -> Weight {
		// Minimum execution time: 74_249_936 nanoseconds.
		Weight::from_ref_time(75_255_309_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_8() -> Weight {
		// Minimum execution time: 74_818_479 nanoseconds.
		Weight::from_ref_time(76_062_257_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_64() -> Weight {
		// Minimum execution time: 74_803_724 nanoseconds.
		Weight::from_ref_time(75_804_037_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_1024() -> Weight {
		// Minimum execution time: 81_667_728 nanoseconds.
		Weight::from_ref_time(83_228_545_000_u64)
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	/// The range of component `e` is `[1, 10000000]`.
	fn verify_data_too_long(_e: u32, ) -> Weight {
		// Minimum execution time: 3_382 nanoseconds.
		Weight::from_ref_time(4_215_574_u64)
	}
	/// The range of component `l` is `[1, 10000]`.
	fn verify_data_deserializing_fails(_l: u32, ) -> Weight {
		// Minimum execution time: 5_548 nanoseconds.
		Weight::from_ref_time(8_972_482_u64)
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	/// The range of component `l` is `[1, 10000]`.
	fn verify_key_deserializing_fails(l: u32, ) -> Weight {
		// Minimum execution time: 5_305_992 nanoseconds.
		Weight::from_ref_time(6_141_320_806_u64)
			// Standard Error: 5_361
			.saturating_add(Weight::from_ref_time(11_822_u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
}

// For backwards compatibility and tests
impl BenchmarkInfo for () {
	// Storage: BabyLiminal VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn store_key(l: u32, ) -> Weight {
		// Minimum execution time: 13_474 nanoseconds.
		Weight::from_ref_time(14_465_875_u64)
			// Standard Error: 29
			.saturating_add(Weight::from_ref_time(567_u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn overwrite_key(l: u32, ) -> Weight {
		// Minimum execution time: 12_801 nanoseconds.
		Weight::from_ref_time(13_299_939_u64)
			// Standard Error: 40
			.saturating_add(Weight::from_ref_time(706_u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_groth16_xor() -> Weight {
		// Minimum execution time: 40_835_989 nanoseconds.
		Weight::from_ref_time(41_360_423_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_groth16_linear_equation() -> Weight {
		// Minimum execution time: 32_639_940 nanoseconds.
		Weight::from_ref_time(33_183_542_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_8() -> Weight {
		// Minimum execution time: 43_535_647 nanoseconds.
		Weight::from_ref_time(44_534_826_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_64() -> Weight {
		// Minimum execution time: 43_736_277 nanoseconds.
		Weight::from_ref_time(44_928_816_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_groth16_merkle_tree_1024() -> Weight {
		// Minimum execution time: 44_398_502 nanoseconds.
		Weight::from_ref_time(45_404_315_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_gm17_xor() -> Weight {
		// Minimum execution time: 47_317_978 nanoseconds.
		Weight::from_ref_time(48_630_811_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_gm17_linear_equation() -> Weight {
		// Minimum execution time: 37_869_011 nanoseconds.
		Weight::from_ref_time(39_424_421_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_8() -> Weight {
		// Minimum execution time: 50_106_274 nanoseconds.
		Weight::from_ref_time(50_982_596_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_64() -> Weight {
		// Minimum execution time: 50_371_264 nanoseconds.
		Weight::from_ref_time(51_318_930_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_gm17_merkle_tree_1024() -> Weight {
		// Minimum execution time: 51_354_405 nanoseconds.
		Weight::from_ref_time(55_320_255_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_marlin_xor() -> Weight {
		// Minimum execution time: 72_380_865 nanoseconds.
		Weight::from_ref_time(76_175_990_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_marlin_linear_equation() -> Weight {
		// Minimum execution time: 74_249_936 nanoseconds.
		Weight::from_ref_time(75_255_309_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_8() -> Weight {
		// Minimum execution time: 74_818_479 nanoseconds.
		Weight::from_ref_time(76_062_257_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_64() -> Weight {
		// Minimum execution time: 74_803_724 nanoseconds.
		Weight::from_ref_time(75_804_037_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	fn verify_marlin_merkle_tree_1024() -> Weight {
		// Minimum execution time: 81_667_728 nanoseconds.
		Weight::from_ref_time(83_228_545_000_u64)
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	/// The range of component `e` is `[1, 10000000]`.
	fn verify_data_too_long(_e: u32, ) -> Weight {
		// Minimum execution time: 3_382 nanoseconds.
		Weight::from_ref_time(4_215_574_u64)
	}
	/// The range of component `l` is `[1, 10000]`.
	fn verify_data_deserializing_fails(_l: u32, ) -> Weight {
		// Minimum execution time: 5_548 nanoseconds.
		Weight::from_ref_time(8_972_482_u64)
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	/// The range of component `l` is `[1, 10000]`.
	fn verify_key_deserializing_fails(l: u32, ) -> Weight {
		// Minimum execution time: 5_305_992 nanoseconds.
		Weight::from_ref_time(6_141_320_806_u64)
			// Standard Error: 5_361
			.saturating_add(Weight::from_ref_time(11_822_u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
}
