//! Autogenerated weights for pallet_baby_liminal
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-16, STEPS: `20`, REPEAT: 50, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("chainspec.json"), DB CACHE: 1024

// Executed Command:
// target/release/aleph-node
// benchmark
// pallet
// --chain=chainspec.json
// --pallet=pallet_baby_liminal
// --extrinsic=*
// --steps=20
// --repeat=50
// --template=.maintain/pallet-weight-template.hbs
// --execution=wasm
// --wasm-execution=compiled
// --output=pallets/baby-liminal/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_baby_liminal.
pub trait WeightInfo {
	fn store_key(key_length: u32) -> Weight;
	fn overwrite_key(key_length: u32) -> Weight;
	fn verify_groth16() -> Weight;
	fn verify_gm17() -> Weight;
	fn verify_marlin() -> Weight;
	fn verify_data_too_long(excess: u32) -> Weight;
	fn verify_data_deserializing_fails(data_length: u32) -> Weight;
	fn verify_key_deserializing_fails(key_length: u32) -> Weight;
	fn poseidon_one_to_one() -> Weight;
	fn poseidon_two_to_one() -> Weight;
	fn poseidon_four_to_one() -> Weight;
}

impl<I: BenchmarkInfo> WeightInfo for I {
	fn store_key(key_length: u32) -> Weight {
		<I as BenchmarkInfo>::store_key(key_length)
	}

	fn overwrite_key(key_length: u32) -> Weight {
		<I as BenchmarkInfo>::overwrite_key(key_length)
	}

	fn verify_groth16() -> Weight {
		<I as BenchmarkInfo>::verify_groth16_xor()
			.max(<I as BenchmarkInfo>::verify_groth16_linear_equation())
			.max(<I as BenchmarkInfo>::verify_groth16_merkle_tree_8())
			.max(<I as BenchmarkInfo>::verify_groth16_merkle_tree_64())
			.max(<I as BenchmarkInfo>::verify_groth16_merkle_tree_1024())
	}

	fn verify_gm17() -> Weight {
		<I as BenchmarkInfo>::verify_gm17_xor()
			.max(<I as BenchmarkInfo>::verify_gm17_linear_equation())
			.max(<I as BenchmarkInfo>::verify_gm17_merkle_tree_8())
			.max(<I as BenchmarkInfo>::verify_gm17_merkle_tree_64())
			.max(<I as BenchmarkInfo>::verify_gm17_merkle_tree_1024())
	}

	fn verify_marlin() -> Weight {
		<I as BenchmarkInfo>::verify_marlin_xor()
			.max(<I as BenchmarkInfo>::verify_marlin_linear_equation())
			.max(<I as BenchmarkInfo>::verify_marlin_merkle_tree_8())
			.max(<I as BenchmarkInfo>::verify_marlin_merkle_tree_64())
			.max(<I as BenchmarkInfo>::verify_marlin_merkle_tree_1024())
	}

	fn verify_data_too_long(excess: u32) -> Weight {
		<I as BenchmarkInfo>::verify_data_too_long(excess)
	}

	fn verify_data_deserializing_fails(data_length: u32) -> Weight {
		<I as BenchmarkInfo>::verify_data_deserializing_fails(data_length)
	}

	fn verify_key_deserializing_fails(key_length: u32) -> Weight {
		<I as BenchmarkInfo>::verify_key_deserializing_fails(key_length)
	}

	fn poseidon_one_to_one() -> Weight {
		<I as BenchmarkInfo>::poseidon_one_to_one()
	}

	fn poseidon_two_to_one() -> Weight {
		<I as BenchmarkInfo>::poseidon_two_to_one()
	}

	fn poseidon_four_to_one() -> Weight {
		<I as BenchmarkInfo>::poseidon_four_to_one()
	}
}

/// Benchmark results for pallet_baby_liminal.
trait BenchmarkInfo {
	fn store_key(l: u32, ) -> Weight;
	fn overwrite_key(l: u32, ) -> Weight;
	fn verify_groth16_xor() -> Weight;
	fn verify_groth16_linear_equation() -> Weight;
	fn verify_groth16_merkle_tree_8() -> Weight;
	fn verify_groth16_merkle_tree_64() -> Weight;
	fn verify_groth16_merkle_tree_1024() -> Weight;
	fn verify_gm17_xor() -> Weight;
	fn verify_gm17_linear_equation() -> Weight;
	fn verify_gm17_merkle_tree_8() -> Weight;
	fn verify_gm17_merkle_tree_64() -> Weight;
	fn verify_gm17_merkle_tree_1024() -> Weight;
	fn verify_marlin_xor() -> Weight;
	fn verify_marlin_linear_equation() -> Weight;
	fn verify_marlin_merkle_tree_8() -> Weight;
	fn verify_marlin_merkle_tree_64() -> Weight;
	fn verify_marlin_merkle_tree_1024() -> Weight;
	fn verify_data_too_long(e: u32, ) -> Weight;
	fn verify_data_deserializing_fails(l: u32, ) -> Weight;
	fn verify_key_deserializing_fails(l: u32, ) -> Weight;
	fn poseidon_one_to_one() -> Weight;
	fn poseidon_two_to_one() -> Weight;
	fn poseidon_four_to_one() -> Weight;
}

/// Weights for pallet_baby_liminal using the Substrate node and recommended hardware.
pub struct AlephWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> BenchmarkInfo for AlephWeight<T> {
	// Storage: BabyLiminal VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn store_key(l: u32, ) -> Weight {
		// Minimum execution time: 12_907 nanoseconds.
		Weight::from_ref_time(13_001_041_u64)
			// Standard Error: 83
			.saturating_add(Weight::from_ref_time(1_054_u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn overwrite_key(l: u32, ) -> Weight {
		// Minimum execution time: 12_057 nanoseconds.
		Weight::from_ref_time(14_520_334_u64)
			// Standard Error: 22
			.saturating_add(Weight::from_ref_time(295_u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_xor() -> Weight {
		// Minimum execution time: 40_334_677 nanoseconds.
		Weight::from_ref_time(40_687_248_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_linear_equation() -> Weight {
		// Minimum execution time: 31_927_296 nanoseconds.
		Weight::from_ref_time(32_270_839_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_merkle_tree_8() -> Weight {
		// Minimum execution time: 42_655_446 nanoseconds.
		Weight::from_ref_time(42_988_190_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_merkle_tree_64() -> Weight {
		// Minimum execution time: 42_915_912 nanoseconds.
		Weight::from_ref_time(43_253_257_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_merkle_tree_1024() -> Weight {
		// Minimum execution time: 42_654_650 nanoseconds.
		Weight::from_ref_time(46_665_121_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_xor() -> Weight {
		// Minimum execution time: 45_692_468 nanoseconds.
		Weight::from_ref_time(46_482_858_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_linear_equation() -> Weight {
		// Minimum execution time: 37_048_514 nanoseconds.
		Weight::from_ref_time(40_797_132_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_merkle_tree_8() -> Weight {
		// Minimum execution time: 47_618_995 nanoseconds.
		Weight::from_ref_time(49_057_734_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_merkle_tree_64() -> Weight {
		// Minimum execution time: 48_455_450 nanoseconds.
		Weight::from_ref_time(49_949_547_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_merkle_tree_1024() -> Weight {
		// Minimum execution time: 48_069_093 nanoseconds.
		Weight::from_ref_time(49_972_898_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_xor() -> Weight {
		// Minimum execution time: 72_492_126 nanoseconds.
		Weight::from_ref_time(74_390_112_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_linear_equation() -> Weight {
		// Minimum execution time: 72_007_266 nanoseconds.
		Weight::from_ref_time(72_961_712_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_merkle_tree_8() -> Weight {
		// Minimum execution time: 69_522_878 nanoseconds.
		Weight::from_ref_time(73_450_982_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_merkle_tree_64() -> Weight {
		// Minimum execution time: 72_240_128 nanoseconds.
		Weight::from_ref_time(75_598_877_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_merkle_tree_1024() -> Weight {
		// Minimum execution time: 71_423_532 nanoseconds.
		Weight::from_ref_time(74_271_135_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// The range of component `e` is `[1, 10000000]`.
	fn verify_data_too_long(_e: u32, ) -> Weight {
		// Minimum execution time: 3_460 nanoseconds.
		Weight::from_ref_time(3_822_854_u64)
	}
	/// The range of component `l` is `[1, 10000]`.
	fn verify_data_deserializing_fails(l: u32, ) -> Weight {
		// Minimum execution time: 5_935 nanoseconds.
		Weight::from_ref_time(6_880_690_u64)
			// Standard Error: 37
			.saturating_add(Weight::from_ref_time(26_u64).saturating_mul(l as u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	/// The range of component `l` is `[1, 10000]`.
	fn verify_key_deserializing_fails(l: u32, ) -> Weight {
		// Minimum execution time: 5_429_243 nanoseconds.
		Weight::from_ref_time(5_776_372_032_u64)
			// Standard Error: 1_484
			.saturating_add(Weight::from_ref_time(3_844_u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn poseidon_one_to_one() -> Weight {
		// Minimum execution time: 6_236_888 nanoseconds.
		Weight::from_ref_time(6_309_551_000_u64)
	}
	fn poseidon_two_to_one() -> Weight {
		// Minimum execution time: 9_760_545 nanoseconds.
		Weight::from_ref_time(9_923_418_000_u64)
	}
	fn poseidon_four_to_one() -> Weight {
		// Minimum execution time: 17_624_908 nanoseconds.
		Weight::from_ref_time(18_564_080_000_u64)
	}
}

// For backwards compatibility and tests
impl BenchmarkInfo for () {
	// Storage: BabyLiminal VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn store_key(l: u32, ) -> Weight {
		// Minimum execution time: 12_907 nanoseconds.
		Weight::from_ref_time(13_001_041_u64)
			// Standard Error: 83
			.saturating_add(Weight::from_ref_time(1_054_u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn overwrite_key(l: u32, ) -> Weight {
		// Minimum execution time: 12_057 nanoseconds.
		Weight::from_ref_time(14_520_334_u64)
			// Standard Error: 22
			.saturating_add(Weight::from_ref_time(295_u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_xor() -> Weight {
		// Minimum execution time: 40_334_677 nanoseconds.
		Weight::from_ref_time(40_687_248_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_linear_equation() -> Weight {
		// Minimum execution time: 31_927_296 nanoseconds.
		Weight::from_ref_time(32_270_839_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_merkle_tree_8() -> Weight {
		// Minimum execution time: 42_655_446 nanoseconds.
		Weight::from_ref_time(42_988_190_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_merkle_tree_64() -> Weight {
		// Minimum execution time: 42_915_912 nanoseconds.
		Weight::from_ref_time(43_253_257_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_merkle_tree_1024() -> Weight {
		// Minimum execution time: 42_654_650 nanoseconds.
		Weight::from_ref_time(46_665_121_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_xor() -> Weight {
		// Minimum execution time: 45_692_468 nanoseconds.
		Weight::from_ref_time(46_482_858_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_linear_equation() -> Weight {
		// Minimum execution time: 37_048_514 nanoseconds.
		Weight::from_ref_time(40_797_132_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_merkle_tree_8() -> Weight {
		// Minimum execution time: 47_618_995 nanoseconds.
		Weight::from_ref_time(49_057_734_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_merkle_tree_64() -> Weight {
		// Minimum execution time: 48_455_450 nanoseconds.
		Weight::from_ref_time(49_949_547_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_merkle_tree_1024() -> Weight {
		// Minimum execution time: 48_069_093 nanoseconds.
		Weight::from_ref_time(49_972_898_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_xor() -> Weight {
		// Minimum execution time: 72_492_126 nanoseconds.
		Weight::from_ref_time(74_390_112_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_linear_equation() -> Weight {
		// Minimum execution time: 72_007_266 nanoseconds.
		Weight::from_ref_time(72_961_712_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_merkle_tree_8() -> Weight {
		// Minimum execution time: 69_522_878 nanoseconds.
		Weight::from_ref_time(73_450_982_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_merkle_tree_64() -> Weight {
		// Minimum execution time: 72_240_128 nanoseconds.
		Weight::from_ref_time(75_598_877_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_merkle_tree_1024() -> Weight {
		// Minimum execution time: 71_423_532 nanoseconds.
		Weight::from_ref_time(74_271_135_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// The range of component `e` is `[1, 10000000]`.
	fn verify_data_too_long(_e: u32, ) -> Weight {
		// Minimum execution time: 3_460 nanoseconds.
		Weight::from_ref_time(3_822_854_u64)
	}
	/// The range of component `l` is `[1, 10000]`.
	fn verify_data_deserializing_fails(l: u32, ) -> Weight {
		// Minimum execution time: 5_935 nanoseconds.
		Weight::from_ref_time(6_880_690_u64)
			// Standard Error: 37
			.saturating_add(Weight::from_ref_time(26_u64).saturating_mul(l as u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	/// The range of component `l` is `[1, 10000]`.
	fn verify_key_deserializing_fails(l: u32, ) -> Weight {
		// Minimum execution time: 5_429_243 nanoseconds.
		Weight::from_ref_time(5_776_372_032_u64)
			// Standard Error: 1_484
			.saturating_add(Weight::from_ref_time(3_844_u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	fn poseidon_one_to_one() -> Weight {
		// Minimum execution time: 6_236_888 nanoseconds.
		Weight::from_ref_time(6_309_551_000_u64)
	}
	fn poseidon_two_to_one() -> Weight {
		// Minimum execution time: 9_760_545 nanoseconds.
		Weight::from_ref_time(9_923_418_000_u64)
	}
	fn poseidon_four_to_one() -> Weight {
		// Minimum execution time: 17_624_908 nanoseconds.
		Weight::from_ref_time(18_564_080_000_u64)
	}
}
