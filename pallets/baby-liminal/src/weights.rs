//! Autogenerated weights for pallet_baby_liminal
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 4.0.0-dev
//! DATE: 2023-02-16, STEPS: `20`, REPEAT: 50, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: Some(Wasm), WASM-EXECUTION: Compiled, CHAIN: Some("chainspec.json"), DB CACHE: 1024

// Executed Command:
// target/release/aleph-node
// benchmark
// pallet
// --chain=chainspec.json
// --pallet=pallet_baby_liminal
// --extrinsic=*
// --steps=20
// --repeat=50
// --template=.maintain/pallet-weight-template.hbs
// --execution=wasm
// --wasm-execution=compiled
// --output=pallets/baby-liminal/src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_baby_liminal.
pub trait WeightInfo {
	fn store_key(key_length: u32) -> Weight;
	fn overwrite_key(key_length: u32) -> Weight;
	fn verify_groth16() -> Weight;
	fn verify_gm17() -> Weight;
	fn verify_marlin() -> Weight;
	fn verify_data_too_long(excess: u32) -> Weight;
	fn verify_data_deserializing_fails(data_length: u32) -> Weight;
	fn verify_key_deserializing_fails(key_length: u32) -> Weight;
	fn poseidon_one_to_one() -> Weight;
	fn poseidon_two_to_one() -> Weight;
	fn poseidon_four_to_one() -> Weight;
}

impl<I: BenchmarkInfo> WeightInfo for I {
	fn store_key(key_length: u32) -> Weight {
		<I as BenchmarkInfo>::store_key(key_length)
	}

	fn overwrite_key(key_length: u32) -> Weight {
		<I as BenchmarkInfo>::overwrite_key(key_length)
	}

	fn verify_groth16() -> Weight {
		<I as BenchmarkInfo>::verify_groth16_xor()
			.max(<I as BenchmarkInfo>::verify_groth16_linear_equation())
			.max(<I as BenchmarkInfo>::verify_groth16_merkle_tree_8())
			.max(<I as BenchmarkInfo>::verify_groth16_merkle_tree_64())
			.max(<I as BenchmarkInfo>::verify_groth16_merkle_tree_1024())
	}

	fn verify_gm17() -> Weight {
		<I as BenchmarkInfo>::verify_gm17_xor()
			.max(<I as BenchmarkInfo>::verify_gm17_linear_equation())
			.max(<I as BenchmarkInfo>::verify_gm17_merkle_tree_8())
			.max(<I as BenchmarkInfo>::verify_gm17_merkle_tree_64())
			.max(<I as BenchmarkInfo>::verify_gm17_merkle_tree_1024())
	}

	fn verify_marlin() -> Weight {
		<I as BenchmarkInfo>::verify_marlin_xor()
			.max(<I as BenchmarkInfo>::verify_marlin_linear_equation())
			.max(<I as BenchmarkInfo>::verify_marlin_merkle_tree_8())
			.max(<I as BenchmarkInfo>::verify_marlin_merkle_tree_64())
			.max(<I as BenchmarkInfo>::verify_marlin_merkle_tree_1024())
	}

	fn verify_data_too_long(excess: u32) -> Weight {
		<I as BenchmarkInfo>::verify_data_too_long(excess)
	}

	fn verify_data_deserializing_fails(data_length: u32) -> Weight {
		<I as BenchmarkInfo>::verify_data_deserializing_fails(data_length)
	}

	fn verify_key_deserializing_fails(key_length: u32) -> Weight {
		<I as BenchmarkInfo>::verify_key_deserializing_fails(key_length)
	}

	fn poseidon_one_to_one() -> Weight {
		<I as BenchmarkInfo>::poseidon_one_to_one()
	}

	fn poseidon_two_to_one() -> Weight {
		<I as BenchmarkInfo>::poseidon_two_to_one()
	}

	fn poseidon_four_to_one() -> Weight {
		<I as BenchmarkInfo>::poseidon_four_to_one()
	}
}

/// Benchmark results for pallet_baby_liminal.
trait BenchmarkInfo {
	fn store_key(l: u32, ) -> Weight;
	fn overwrite_key(l: u32, ) -> Weight;
	fn verify_groth16_xor() -> Weight;
	fn verify_groth16_linear_equation() -> Weight;
	fn verify_groth16_merkle_tree_8() -> Weight;
	fn verify_groth16_merkle_tree_64() -> Weight;
	fn verify_groth16_merkle_tree_1024() -> Weight;
	fn verify_gm17_xor() -> Weight;
	fn verify_gm17_linear_equation() -> Weight;
	fn verify_gm17_merkle_tree_8() -> Weight;
	fn verify_gm17_merkle_tree_64() -> Weight;
	fn verify_gm17_merkle_tree_1024() -> Weight;
	fn verify_marlin_xor() -> Weight;
	fn verify_marlin_linear_equation() -> Weight;
	fn verify_marlin_merkle_tree_8() -> Weight;
	fn verify_marlin_merkle_tree_64() -> Weight;
	fn verify_marlin_merkle_tree_1024() -> Weight;
	fn verify_data_too_long(e: u32, ) -> Weight;
	fn verify_data_deserializing_fails(l: u32, ) -> Weight;
	fn verify_key_deserializing_fails(l: u32, ) -> Weight;
	fn poseidon_one_to_one() -> Weight;
	fn poseidon_two_to_one() -> Weight;
	fn poseidon_four_to_one() -> Weight;
}

/// Weights for pallet_baby_liminal using the Substrate node and recommended hardware.
pub struct AlephWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> BenchmarkInfo for AlephWeight<T> {
	// Storage: BabyLiminal VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn store_key(l: u32, ) -> Weight {
		// Minimum execution time: 13_622 nanoseconds.
		Weight::from_ref_time(21_419_085_u64)
			// Standard Error: 174
			.saturating_add(Weight::from_ref_time(464_u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn overwrite_key(l: u32, ) -> Weight {
		// Minimum execution time: 13_068 nanoseconds.
		Weight::from_ref_time(12_867_832_u64)
			// Standard Error: 33
			.saturating_add(Weight::from_ref_time(876_u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
			.saturating_add(T::DbWeight::get().writes(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_xor() -> Weight {
		// Minimum execution time: 41_369_094 nanoseconds.
		Weight::from_ref_time(44_476_479_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_linear_equation() -> Weight {
		// Minimum execution time: 33_856_108 nanoseconds.
		Weight::from_ref_time(35_067_692_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_merkle_tree_8() -> Weight {
		// Minimum execution time: 45_820_291 nanoseconds.
		Weight::from_ref_time(46_455_866_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_merkle_tree_64() -> Weight {
		// Minimum execution time: 45_142_204 nanoseconds.
		Weight::from_ref_time(46_418_785_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_merkle_tree_1024() -> Weight {
		// Minimum execution time: 45_585_249 nanoseconds.
		Weight::from_ref_time(46_408_578_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_xor() -> Weight {
		// Minimum execution time: 48_231_191 nanoseconds.
		Weight::from_ref_time(49_264_436_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_linear_equation() -> Weight {
		// Minimum execution time: 37_423_659 nanoseconds.
		Weight::from_ref_time(39_855_138_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_merkle_tree_8() -> Weight {
		// Minimum execution time: 49_787_475 nanoseconds.
		Weight::from_ref_time(51_015_008_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_merkle_tree_64() -> Weight {
		// Minimum execution time: 49_698_242 nanoseconds.
		Weight::from_ref_time(50_928_017_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_merkle_tree_1024() -> Weight {
		// Minimum execution time: 49_894_046 nanoseconds.
		Weight::from_ref_time(51_055_655_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_xor() -> Weight {
		// Minimum execution time: 74_097_338 nanoseconds.
		Weight::from_ref_time(76_520_568_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_linear_equation() -> Weight {
		// Minimum execution time: 74_253_944 nanoseconds.
		Weight::from_ref_time(75_955_362_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_merkle_tree_8() -> Weight {
		// Minimum execution time: 73_084_496 nanoseconds.
		Weight::from_ref_time(74_598_164_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_merkle_tree_64() -> Weight {
		// Minimum execution time: 72_599_340 nanoseconds.
		Weight::from_ref_time(74_540_468_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_merkle_tree_1024() -> Weight {
		// Minimum execution time: 72_579_180 nanoseconds.
		Weight::from_ref_time(74_461_989_000_u64)
			.saturating_add(T::DbWeight::get().reads(2_u64))
	}
	/// The range of component `e` is `[1, 10000000]`.
	fn verify_data_too_long(_e: u32, ) -> Weight {
		// Minimum execution time: 3_408 nanoseconds.
		Weight::from_ref_time(4_819_343_u64)
	}
	/// The range of component `l` is `[1, 10000]`.
	fn verify_data_deserializing_fails(_l: u32, ) -> Weight {
		// Minimum execution time: 5_742 nanoseconds.
		Weight::from_ref_time(7_884_071_u64)
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	/// The range of component `l` is `[1, 10000]`.
	fn verify_key_deserializing_fails(l: u32, ) -> Weight {
		// Minimum execution time: 5_304_275 nanoseconds.
		Weight::from_ref_time(5_727_348_523_u64)
			// Standard Error: 918
			.saturating_add(Weight::from_ref_time(6_019_u64).saturating_mul(l as u64))
			.saturating_add(T::DbWeight::get().reads(1_u64))
	}
	fn poseidon_one_to_one() -> Weight {
		// Minimum execution time: 5_896_068 nanoseconds.
		Weight::from_ref_time(6_273_934_000_u64)
	}
	fn poseidon_two_to_one() -> Weight {
		// Minimum execution time: 9_630_425 nanoseconds.
		Weight::from_ref_time(9_910_464_000_u64)
	}
	fn poseidon_four_to_one() -> Weight {
		// Minimum execution time: 17_861_796 nanoseconds.
		Weight::from_ref_time(18_527_755_000_u64)
	}
}

// For backwards compatibility and tests
impl BenchmarkInfo for () {
	// Storage: BabyLiminal VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn store_key(l: u32, ) -> Weight {
		// Minimum execution time: 13_622 nanoseconds.
		Weight::from_ref_time(21_419_085_u64)
			// Standard Error: 174
			.saturating_add(Weight::from_ref_time(464_u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:1)
	/// The range of component `l` is `[1, 10000]`.
	fn overwrite_key(l: u32, ) -> Weight {
		// Minimum execution time: 13_068 nanoseconds.
		Weight::from_ref_time(12_867_832_u64)
			// Standard Error: 33
			.saturating_add(Weight::from_ref_time(876_u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
			.saturating_add(RocksDbWeight::get().writes(1_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_xor() -> Weight {
		// Minimum execution time: 41_369_094 nanoseconds.
		Weight::from_ref_time(44_476_479_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_linear_equation() -> Weight {
		// Minimum execution time: 33_856_108 nanoseconds.
		Weight::from_ref_time(35_067_692_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_merkle_tree_8() -> Weight {
		// Minimum execution time: 45_820_291 nanoseconds.
		Weight::from_ref_time(46_455_866_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_merkle_tree_64() -> Weight {
		// Minimum execution time: 45_142_204 nanoseconds.
		Weight::from_ref_time(46_418_785_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_groth16_merkle_tree_1024() -> Weight {
		// Minimum execution time: 45_585_249 nanoseconds.
		Weight::from_ref_time(46_408_578_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_xor() -> Weight {
		// Minimum execution time: 48_231_191 nanoseconds.
		Weight::from_ref_time(49_264_436_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_linear_equation() -> Weight {
		// Minimum execution time: 37_423_659 nanoseconds.
		Weight::from_ref_time(39_855_138_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_merkle_tree_8() -> Weight {
		// Minimum execution time: 49_787_475 nanoseconds.
		Weight::from_ref_time(51_015_008_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_merkle_tree_64() -> Weight {
		// Minimum execution time: 49_698_242 nanoseconds.
		Weight::from_ref_time(50_928_017_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_gm17_merkle_tree_1024() -> Weight {
		// Minimum execution time: 49_894_046 nanoseconds.
		Weight::from_ref_time(51_055_655_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_xor() -> Weight {
		// Minimum execution time: 74_097_338 nanoseconds.
		Weight::from_ref_time(76_520_568_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_linear_equation() -> Weight {
		// Minimum execution time: 74_253_944 nanoseconds.
		Weight::from_ref_time(75_955_362_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_merkle_tree_8() -> Weight {
		// Minimum execution time: 73_084_496 nanoseconds.
		Weight::from_ref_time(74_598_164_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_merkle_tree_64() -> Weight {
		// Minimum execution time: 72_599_340 nanoseconds.
		Weight::from_ref_time(74_540_468_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	// Storage: System ParentHash (r:1 w:0)
	fn verify_marlin_merkle_tree_1024() -> Weight {
		// Minimum execution time: 72_579_180 nanoseconds.
		Weight::from_ref_time(74_461_989_000_u64)
			.saturating_add(RocksDbWeight::get().reads(2_u64))
	}
	/// The range of component `e` is `[1, 10000000]`.
	fn verify_data_too_long(_e: u32, ) -> Weight {
		// Minimum execution time: 3_408 nanoseconds.
		Weight::from_ref_time(4_819_343_u64)
	}
	/// The range of component `l` is `[1, 10000]`.
	fn verify_data_deserializing_fails(_l: u32, ) -> Weight {
		// Minimum execution time: 5_742 nanoseconds.
		Weight::from_ref_time(7_884_071_u64)
	}
	// Storage: BabyLiminal VerificationKeys (r:1 w:0)
	/// The range of component `l` is `[1, 10000]`.
	fn verify_key_deserializing_fails(l: u32, ) -> Weight {
		// Minimum execution time: 5_304_275 nanoseconds.
		Weight::from_ref_time(5_727_348_523_u64)
			// Standard Error: 918
			.saturating_add(Weight::from_ref_time(6_019_u64).saturating_mul(l as u64))
			.saturating_add(RocksDbWeight::get().reads(1_u64))
	}
	fn poseidon_one_to_one() -> Weight {
		// Minimum execution time: 5_896_068 nanoseconds.
		Weight::from_ref_time(6_273_934_000_u64)
	}
	fn poseidon_two_to_one() -> Weight {
		// Minimum execution time: 9_630_425 nanoseconds.
		Weight::from_ref_time(9_910_464_000_u64)
	}
	fn poseidon_four_to_one() -> Weight {
		// Minimum execution time: 17_861_796 nanoseconds.
		Weight::from_ref_time(18_527_755_000_u64)
	}
}
